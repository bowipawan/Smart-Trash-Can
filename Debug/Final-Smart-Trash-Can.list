
Final-Smart-Trash-Can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800585c  0800585c  0001585c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058c4  080058c4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080058c4  080058c4  000158c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058cc  080058cc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058cc  080058cc  000158cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058d0  080058d0  000158d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080058d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000074  08005948  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08005948  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcdf  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cf2  00000000  00000000  0002dd83  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000eb8  00000000  00000000  0002fa78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000df8  00000000  00000000  00030930  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015f8c  00000000  00000000  00031728  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a452  00000000  00000000  000476b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d37c  00000000  00000000  00051b06  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dee82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000433c  00000000  00000000  000def00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005844 	.word	0x08005844

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005844 	.word	0x08005844

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b972 	b.w	8000d88 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9e08      	ldr	r6, [sp, #32]
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	4688      	mov	r8, r1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d14b      	bne.n	8000b62 <__udivmoddi4+0xa6>
 8000aca:	428a      	cmp	r2, r1
 8000acc:	4615      	mov	r5, r2
 8000ace:	d967      	bls.n	8000ba0 <__udivmoddi4+0xe4>
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0720 	rsb	r7, r2, #32
 8000ada:	fa01 f302 	lsl.w	r3, r1, r2
 8000ade:	fa20 f707 	lsr.w	r7, r0, r7
 8000ae2:	4095      	lsls	r5, r2
 8000ae4:	ea47 0803 	orr.w	r8, r7, r3
 8000ae8:	4094      	lsls	r4, r2
 8000aea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aee:	0c23      	lsrs	r3, r4, #16
 8000af0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000af4:	fa1f fc85 	uxth.w	ip, r5
 8000af8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000afc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b00:	fb07 f10c 	mul.w	r1, r7, ip
 8000b04:	4299      	cmp	r1, r3
 8000b06:	d909      	bls.n	8000b1c <__udivmoddi4+0x60>
 8000b08:	18eb      	adds	r3, r5, r3
 8000b0a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b0e:	f080 811b 	bcs.w	8000d48 <__udivmoddi4+0x28c>
 8000b12:	4299      	cmp	r1, r3
 8000b14:	f240 8118 	bls.w	8000d48 <__udivmoddi4+0x28c>
 8000b18:	3f02      	subs	r7, #2
 8000b1a:	442b      	add	r3, r5
 8000b1c:	1a5b      	subs	r3, r3, r1
 8000b1e:	b2a4      	uxth	r4, r4
 8000b20:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b24:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b2c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b30:	45a4      	cmp	ip, r4
 8000b32:	d909      	bls.n	8000b48 <__udivmoddi4+0x8c>
 8000b34:	192c      	adds	r4, r5, r4
 8000b36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b3a:	f080 8107 	bcs.w	8000d4c <__udivmoddi4+0x290>
 8000b3e:	45a4      	cmp	ip, r4
 8000b40:	f240 8104 	bls.w	8000d4c <__udivmoddi4+0x290>
 8000b44:	3802      	subs	r0, #2
 8000b46:	442c      	add	r4, r5
 8000b48:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b4c:	eba4 040c 	sub.w	r4, r4, ip
 8000b50:	2700      	movs	r7, #0
 8000b52:	b11e      	cbz	r6, 8000b5c <__udivmoddi4+0xa0>
 8000b54:	40d4      	lsrs	r4, r2
 8000b56:	2300      	movs	r3, #0
 8000b58:	e9c6 4300 	strd	r4, r3, [r6]
 8000b5c:	4639      	mov	r1, r7
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d909      	bls.n	8000b7a <__udivmoddi4+0xbe>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	f000 80eb 	beq.w	8000d42 <__udivmoddi4+0x286>
 8000b6c:	2700      	movs	r7, #0
 8000b6e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b72:	4638      	mov	r0, r7
 8000b74:	4639      	mov	r1, r7
 8000b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7a:	fab3 f783 	clz	r7, r3
 8000b7e:	2f00      	cmp	r7, #0
 8000b80:	d147      	bne.n	8000c12 <__udivmoddi4+0x156>
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xd0>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 80fa 	bhi.w	8000d80 <__udivmoddi4+0x2c4>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4698      	mov	r8, r3
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	d0e0      	beq.n	8000b5c <__udivmoddi4+0xa0>
 8000b9a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b9e:	e7dd      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000ba0:	b902      	cbnz	r2, 8000ba4 <__udivmoddi4+0xe8>
 8000ba2:	deff      	udf	#255	; 0xff
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	2a00      	cmp	r2, #0
 8000baa:	f040 808f 	bne.w	8000ccc <__udivmoddi4+0x210>
 8000bae:	1b49      	subs	r1, r1, r5
 8000bb0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bb4:	fa1f f885 	uxth.w	r8, r5
 8000bb8:	2701      	movs	r7, #1
 8000bba:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bbe:	0c23      	lsrs	r3, r4, #16
 8000bc0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bcc:	4299      	cmp	r1, r3
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x124>
 8000bd0:	18eb      	adds	r3, r5, r3
 8000bd2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x122>
 8000bd8:	4299      	cmp	r1, r3
 8000bda:	f200 80cd 	bhi.w	8000d78 <__udivmoddi4+0x2bc>
 8000bde:	4684      	mov	ip, r0
 8000be0:	1a59      	subs	r1, r3, r1
 8000be2:	b2a3      	uxth	r3, r4
 8000be4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000be8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bf0:	fb08 f800 	mul.w	r8, r8, r0
 8000bf4:	45a0      	cmp	r8, r4
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x14c>
 8000bf8:	192c      	adds	r4, r5, r4
 8000bfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x14a>
 8000c00:	45a0      	cmp	r8, r4
 8000c02:	f200 80b6 	bhi.w	8000d72 <__udivmoddi4+0x2b6>
 8000c06:	4618      	mov	r0, r3
 8000c08:	eba4 0408 	sub.w	r4, r4, r8
 8000c0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c10:	e79f      	b.n	8000b52 <__udivmoddi4+0x96>
 8000c12:	f1c7 0c20 	rsb	ip, r7, #32
 8000c16:	40bb      	lsls	r3, r7
 8000c18:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c1c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c20:	fa01 f407 	lsl.w	r4, r1, r7
 8000c24:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c28:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c2c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c30:	4325      	orrs	r5, r4
 8000c32:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c36:	0c2c      	lsrs	r4, r5, #16
 8000c38:	fb08 3319 	mls	r3, r8, r9, r3
 8000c3c:	fa1f fa8e 	uxth.w	sl, lr
 8000c40:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c44:	fb09 f40a 	mul.w	r4, r9, sl
 8000c48:	429c      	cmp	r4, r3
 8000c4a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c4e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c52:	d90b      	bls.n	8000c6c <__udivmoddi4+0x1b0>
 8000c54:	eb1e 0303 	adds.w	r3, lr, r3
 8000c58:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c5c:	f080 8087 	bcs.w	8000d6e <__udivmoddi4+0x2b2>
 8000c60:	429c      	cmp	r4, r3
 8000c62:	f240 8084 	bls.w	8000d6e <__udivmoddi4+0x2b2>
 8000c66:	f1a9 0902 	sub.w	r9, r9, #2
 8000c6a:	4473      	add	r3, lr
 8000c6c:	1b1b      	subs	r3, r3, r4
 8000c6e:	b2ad      	uxth	r5, r5
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c7c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c80:	45a2      	cmp	sl, r4
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x1da>
 8000c84:	eb1e 0404 	adds.w	r4, lr, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	d26b      	bcs.n	8000d66 <__udivmoddi4+0x2aa>
 8000c8e:	45a2      	cmp	sl, r4
 8000c90:	d969      	bls.n	8000d66 <__udivmoddi4+0x2aa>
 8000c92:	3802      	subs	r0, #2
 8000c94:	4474      	add	r4, lr
 8000c96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c9e:	eba4 040a 	sub.w	r4, r4, sl
 8000ca2:	454c      	cmp	r4, r9
 8000ca4:	46c2      	mov	sl, r8
 8000ca6:	464b      	mov	r3, r9
 8000ca8:	d354      	bcc.n	8000d54 <__udivmoddi4+0x298>
 8000caa:	d051      	beq.n	8000d50 <__udivmoddi4+0x294>
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d069      	beq.n	8000d84 <__udivmoddi4+0x2c8>
 8000cb0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cb4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cb8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cbc:	40fd      	lsrs	r5, r7
 8000cbe:	40fc      	lsrs	r4, r7
 8000cc0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cc4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e747      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000ccc:	f1c2 0320 	rsb	r3, r2, #32
 8000cd0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cd4:	4095      	lsls	r5, r2
 8000cd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cda:	fa21 f303 	lsr.w	r3, r1, r3
 8000cde:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce2:	4338      	orrs	r0, r7
 8000ce4:	0c01      	lsrs	r1, r0, #16
 8000ce6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cea:	fa1f f885 	uxth.w	r8, r5
 8000cee:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cf2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf6:	fb07 f308 	mul.w	r3, r7, r8
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	fa04 f402 	lsl.w	r4, r4, r2
 8000d00:	d907      	bls.n	8000d12 <__udivmoddi4+0x256>
 8000d02:	1869      	adds	r1, r5, r1
 8000d04:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d08:	d22f      	bcs.n	8000d6a <__udivmoddi4+0x2ae>
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d92d      	bls.n	8000d6a <__udivmoddi4+0x2ae>
 8000d0e:	3f02      	subs	r7, #2
 8000d10:	4429      	add	r1, r5
 8000d12:	1acb      	subs	r3, r1, r3
 8000d14:	b281      	uxth	r1, r0
 8000d16:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d1a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d22:	fb00 f308 	mul.w	r3, r0, r8
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d907      	bls.n	8000d3a <__udivmoddi4+0x27e>
 8000d2a:	1869      	adds	r1, r5, r1
 8000d2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d30:	d217      	bcs.n	8000d62 <__udivmoddi4+0x2a6>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d915      	bls.n	8000d62 <__udivmoddi4+0x2a6>
 8000d36:	3802      	subs	r0, #2
 8000d38:	4429      	add	r1, r5
 8000d3a:	1ac9      	subs	r1, r1, r3
 8000d3c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d40:	e73b      	b.n	8000bba <__udivmoddi4+0xfe>
 8000d42:	4637      	mov	r7, r6
 8000d44:	4630      	mov	r0, r6
 8000d46:	e709      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000d48:	4607      	mov	r7, r0
 8000d4a:	e6e7      	b.n	8000b1c <__udivmoddi4+0x60>
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	e6fb      	b.n	8000b48 <__udivmoddi4+0x8c>
 8000d50:	4541      	cmp	r1, r8
 8000d52:	d2ab      	bcs.n	8000cac <__udivmoddi4+0x1f0>
 8000d54:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d58:	eb69 020e 	sbc.w	r2, r9, lr
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	4613      	mov	r3, r2
 8000d60:	e7a4      	b.n	8000cac <__udivmoddi4+0x1f0>
 8000d62:	4660      	mov	r0, ip
 8000d64:	e7e9      	b.n	8000d3a <__udivmoddi4+0x27e>
 8000d66:	4618      	mov	r0, r3
 8000d68:	e795      	b.n	8000c96 <__udivmoddi4+0x1da>
 8000d6a:	4667      	mov	r7, ip
 8000d6c:	e7d1      	b.n	8000d12 <__udivmoddi4+0x256>
 8000d6e:	4681      	mov	r9, r0
 8000d70:	e77c      	b.n	8000c6c <__udivmoddi4+0x1b0>
 8000d72:	3802      	subs	r0, #2
 8000d74:	442c      	add	r4, r5
 8000d76:	e747      	b.n	8000c08 <__udivmoddi4+0x14c>
 8000d78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d7c:	442b      	add	r3, r5
 8000d7e:	e72f      	b.n	8000be0 <__udivmoddi4+0x124>
 8000d80:	4638      	mov	r0, r7
 8000d82:	e708      	b.n	8000b96 <__udivmoddi4+0xda>
 8000d84:	4637      	mov	r7, r6
 8000d86:	e6e9      	b.n	8000b5c <__udivmoddi4+0xa0>

08000d88 <__aeabi_idiv0>:
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d92:	f000 ff6f 	bl	8001c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d96:	f000 f91d 	bl	8000fd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d9a:	f000 fadf 	bl	800135c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d9e:	f000 fa89 	bl	80012b4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000da2:	f000 f9ad 	bl	8001100 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000da6:	f000 f97d 	bl	80010a4 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000daa:	f000 fa0b 	bl	80011c4 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8000dae:	f000 faab 	bl	8001308 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000db2:	2100      	movs	r1, #0
 8000db4:	4877      	ldr	r0, [pc, #476]	; (8000f94 <main+0x208>)
 8000db6:	f002 f919 	bl	8002fec <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 8000dba:	210c      	movs	r1, #12
 8000dbc:	4875      	ldr	r0, [pc, #468]	; (8000f94 <main+0x208>)
 8000dbe:	f002 f915 	bl	8002fec <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4874      	ldr	r0, [pc, #464]	; (8000f98 <main+0x20c>)
 8000dc6:	f002 f8b3 	bl	8002f30 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (HAL_UART_Receive(&huart6, &c, 8, 10) == HAL_OK) {
 8000dca:	230a      	movs	r3, #10
 8000dcc:	2208      	movs	r2, #8
 8000dce:	4973      	ldr	r1, [pc, #460]	; (8000f9c <main+0x210>)
 8000dd0:	4873      	ldr	r0, [pc, #460]	; (8000fa0 <main+0x214>)
 8000dd2:	f003 fa53 	bl	800427c <HAL_UART_Receive>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d12e      	bne.n	8000e3a <main+0xae>
			if (state!=4 && !strcmp(c, "11111111")) {
 8000ddc:	4b71      	ldr	r3, [pc, #452]	; (8000fa4 <main+0x218>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b04      	cmp	r3, #4
 8000de2:	d01c      	beq.n	8000e1e <main+0x92>
 8000de4:	4970      	ldr	r1, [pc, #448]	; (8000fa8 <main+0x21c>)
 8000de6:	486d      	ldr	r0, [pc, #436]	; (8000f9c <main+0x210>)
 8000de8:	f7ff f9fa 	bl	80001e0 <strcmp>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d115      	bne.n	8000e1e <main+0x92>
				char c1[8] = "-1";
 8000df2:	f243 132d 	movw	r3, #12589	; 0x312d
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
				HAL_UART_Transmit(&huart6, &c1, strlen(c1), 100);
 8000dfc:	f107 0310 	add.w	r3, r7, #16
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff f9f7 	bl	80001f4 <strlen>
 8000e06:	4603      	mov	r3, r0
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	f107 0110 	add.w	r1, r7, #16
 8000e0e:	2364      	movs	r3, #100	; 0x64
 8000e10:	4863      	ldr	r0, [pc, #396]	; (8000fa0 <main+0x214>)
 8000e12:	f003 f99a 	bl	800414a <HAL_UART_Transmit>
				state = 4;
 8000e16:	4b63      	ldr	r3, [pc, #396]	; (8000fa4 <main+0x218>)
 8000e18:	2204      	movs	r2, #4
 8000e1a:	701a      	strb	r2, [r3, #0]
			if (state!=4 && !strcmp(c, "11111111")) {
 8000e1c:	e00d      	b.n	8000e3a <main+0xae>
			} else if (state!=3 && !strcmp(c, "00000000")) {
 8000e1e:	4b61      	ldr	r3, [pc, #388]	; (8000fa4 <main+0x218>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b03      	cmp	r3, #3
 8000e24:	d009      	beq.n	8000e3a <main+0xae>
 8000e26:	4961      	ldr	r1, [pc, #388]	; (8000fac <main+0x220>)
 8000e28:	485c      	ldr	r0, [pc, #368]	; (8000f9c <main+0x210>)
 8000e2a:	f7ff f9d9 	bl	80001e0 <strcmp>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d102      	bne.n	8000e3a <main+0xae>
				state = 3;
 8000e34:	4b5b      	ldr	r3, [pc, #364]	; (8000fa4 <main+0x218>)
 8000e36:	2203      	movs	r2, #3
 8000e38:	701a      	strb	r2, [r3, #0]
			}
		}
		HCSR04_Read();
 8000e3a:	f000 fc47 	bl	80016cc <HCSR04_Read>
		if (state == 0) {
 8000e3e:	4b59      	ldr	r3, [pc, #356]	; (8000fa4 <main+0x218>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d116      	bne.n	8000e74 <main+0xe8>
			htim3.Instance->CCR1 = CCR_MIN;
 8000e46:	4b5a      	ldr	r3, [pc, #360]	; (8000fb0 <main+0x224>)
 8000e48:	781a      	ldrb	r2, [r3, #0]
 8000e4a:	4b53      	ldr	r3, [pc, #332]	; (8000f98 <main+0x20c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	635a      	str	r2, [r3, #52]	; 0x34
			if (Distance < 30 && Distance > 2) {
 8000e50:	4b58      	ldr	r3, [pc, #352]	; (8000fb4 <main+0x228>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b1d      	cmp	r3, #29
 8000e56:	f200 8098 	bhi.w	8000f8a <main+0x1fe>
 8000e5a:	4b56      	ldr	r3, [pc, #344]	; (8000fb4 <main+0x228>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	f240 8093 	bls.w	8000f8a <main+0x1fe>
				state = 1;
 8000e64:	4b4f      	ldr	r3, [pc, #316]	; (8000fa4 <main+0x218>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	701a      	strb	r2, [r3, #0]
				check = CHECK_MAX;
 8000e6a:	4b53      	ldr	r3, [pc, #332]	; (8000fb8 <main+0x22c>)
 8000e6c:	781a      	ldrb	r2, [r3, #0]
 8000e6e:	4b53      	ldr	r3, [pc, #332]	; (8000fbc <main+0x230>)
 8000e70:	701a      	strb	r2, [r3, #0]
 8000e72:	e08a      	b.n	8000f8a <main+0x1fe>
			}
		} else if (state == 1) {
 8000e74:	4b4b      	ldr	r3, [pc, #300]	; (8000fa4 <main+0x218>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d12f      	bne.n	8000edc <main+0x150>
			if (Distance < 30 && Distance > 2) {
 8000e7c:	4b4d      	ldr	r3, [pc, #308]	; (8000fb4 <main+0x228>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b1d      	cmp	r3, #29
 8000e82:	d80a      	bhi.n	8000e9a <main+0x10e>
 8000e84:	4b4b      	ldr	r3, [pc, #300]	; (8000fb4 <main+0x228>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d906      	bls.n	8000e9a <main+0x10e>
				check--;
 8000e8c:	4b4b      	ldr	r3, [pc, #300]	; (8000fbc <main+0x230>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	3b01      	subs	r3, #1
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	4b49      	ldr	r3, [pc, #292]	; (8000fbc <main+0x230>)
 8000e96:	701a      	strb	r2, [r3, #0]
 8000e98:	e002      	b.n	8000ea0 <main+0x114>
			} else {
				state = 0;
 8000e9a:	4b42      	ldr	r3, [pc, #264]	; (8000fa4 <main+0x218>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	701a      	strb	r2, [r3, #0]
			}
			if (check == 0) {
 8000ea0:	4b46      	ldr	r3, [pc, #280]	; (8000fbc <main+0x230>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d170      	bne.n	8000f8a <main+0x1fe>
				state = 2;
 8000ea8:	4b3e      	ldr	r3, [pc, #248]	; (8000fa4 <main+0x218>)
 8000eaa:	2202      	movs	r2, #2
 8000eac:	701a      	strb	r2, [r3, #0]
				time = TIME_MAX;
 8000eae:	4b44      	ldr	r3, [pc, #272]	; (8000fc0 <main+0x234>)
 8000eb0:	781a      	ldrb	r2, [r3, #0]
 8000eb2:	4b44      	ldr	r3, [pc, #272]	; (8000fc4 <main+0x238>)
 8000eb4:	701a      	strb	r2, [r3, #0]
				char c1[8] = "-1";
 8000eb6:	f243 132d 	movw	r3, #12589	; 0x312d
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60fb      	str	r3, [r7, #12]
				HAL_UART_Transmit(&huart6, &c1, strlen(c1), 100);
 8000ec0:	f107 0308 	add.w	r3, r7, #8
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff f995 	bl	80001f4 <strlen>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	f107 0108 	add.w	r1, r7, #8
 8000ed2:	2364      	movs	r3, #100	; 0x64
 8000ed4:	4832      	ldr	r0, [pc, #200]	; (8000fa0 <main+0x214>)
 8000ed6:	f003 f938 	bl	800414a <HAL_UART_Transmit>
 8000eda:	e056      	b.n	8000f8a <main+0x1fe>
			}
		} else if (state == 2) {
 8000edc:	4b31      	ldr	r3, [pc, #196]	; (8000fa4 <main+0x218>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d11f      	bne.n	8000f24 <main+0x198>
			htim3.Instance->CCR1 = CCR_MAX;
 8000ee4:	4b38      	ldr	r3, [pc, #224]	; (8000fc8 <main+0x23c>)
 8000ee6:	781a      	ldrb	r2, [r3, #0]
 8000ee8:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <main+0x20c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	635a      	str	r2, [r3, #52]	; 0x34
			if (Distance < 30 && Distance > 2) {
 8000eee:	4b31      	ldr	r3, [pc, #196]	; (8000fb4 <main+0x228>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b1d      	cmp	r3, #29
 8000ef4:	d808      	bhi.n	8000f08 <main+0x17c>
 8000ef6:	4b2f      	ldr	r3, [pc, #188]	; (8000fb4 <main+0x228>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d904      	bls.n	8000f08 <main+0x17c>
				time = TIME_MAX;
 8000efe:	4b30      	ldr	r3, [pc, #192]	; (8000fc0 <main+0x234>)
 8000f00:	781a      	ldrb	r2, [r3, #0]
 8000f02:	4b30      	ldr	r3, [pc, #192]	; (8000fc4 <main+0x238>)
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	e040      	b.n	8000f8a <main+0x1fe>
			} else {
				time--;
 8000f08:	4b2e      	ldr	r3, [pc, #184]	; (8000fc4 <main+0x238>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	4b2c      	ldr	r3, [pc, #176]	; (8000fc4 <main+0x238>)
 8000f12:	701a      	strb	r2, [r3, #0]
				if (time == 0) {
 8000f14:	4b2b      	ldr	r3, [pc, #172]	; (8000fc4 <main+0x238>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d136      	bne.n	8000f8a <main+0x1fe>
					state = 3;
 8000f1c:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <main+0x218>)
 8000f1e:	2203      	movs	r2, #3
 8000f20:	701a      	strb	r2, [r3, #0]
 8000f22:	e032      	b.n	8000f8a <main+0x1fe>
				}
			}
		} else if (state == 3) {
 8000f24:	4b1f      	ldr	r3, [pc, #124]	; (8000fa4 <main+0x218>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	d125      	bne.n	8000f78 <main+0x1ec>
			htim3.Instance->CCR1 = CCR_MIN;
 8000f2c:	4b20      	ldr	r3, [pc, #128]	; (8000fb0 <main+0x224>)
 8000f2e:	781a      	ldrb	r2, [r3, #0]
 8000f30:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <main+0x20c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(1500);
 8000f36:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000f3a:	f000 ff0d 	bl	8001d58 <HAL_Delay>
			HCSR04_Read2();
 8000f3e:	f000 fbe5 	bl	800170c <HCSR04_Read2>
			HAL_Delay(500);
 8000f42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f46:	f000 ff07 	bl	8001d58 <HAL_Delay>
			state = 0;
 8000f4a:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <main+0x218>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
			char c2[8];
			sprintf(c2,"%d", Distance2);
 8000f50:	4b1e      	ldr	r3, [pc, #120]	; (8000fcc <main+0x240>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	463b      	mov	r3, r7
 8000f58:	491d      	ldr	r1, [pc, #116]	; (8000fd0 <main+0x244>)
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f004 f86c 	bl	8005038 <siprintf>
			HAL_UART_Transmit(&huart6, &c2, strlen(c2), 100);
 8000f60:	463b      	mov	r3, r7
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff f946 	bl	80001f4 <strlen>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	4639      	mov	r1, r7
 8000f6e:	2364      	movs	r3, #100	; 0x64
 8000f70:	480b      	ldr	r0, [pc, #44]	; (8000fa0 <main+0x214>)
 8000f72:	f003 f8ea 	bl	800414a <HAL_UART_Transmit>
 8000f76:	e008      	b.n	8000f8a <main+0x1fe>
		} else if (state == 4) {
 8000f78:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <main+0x218>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b04      	cmp	r3, #4
 8000f7e:	d104      	bne.n	8000f8a <main+0x1fe>
			htim3.Instance->CCR1 = CCR_MAX;
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <main+0x23c>)
 8000f82:	781a      	ldrb	r2, [r3, #0]
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <main+0x20c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	635a      	str	r2, [r3, #52]	; 0x34
		}
		HAL_Delay(15);
 8000f8a:	200f      	movs	r0, #15
 8000f8c:	f000 fee4 	bl	8001d58 <HAL_Delay>
	while (1) {
 8000f90:	e71b      	b.n	8000dca <main+0x3e>
 8000f92:	bf00      	nop
 8000f94:	20000158 	.word	0x20000158
 8000f98:	20000110 	.word	0x20000110
 8000f9c:	20000150 	.word	0x20000150
 8000fa0:	20000198 	.word	0x20000198
 8000fa4:	200000ac 	.word	0x200000ac
 8000fa8:	0800585c 	.word	0x0800585c
 8000fac:	08005868 	.word	0x08005868
 8000fb0:	20000003 	.word	0x20000003
 8000fb4:	200000aa 	.word	0x200000aa
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	200000ae 	.word	0x200000ae
 8000fc0:	20000001 	.word	0x20000001
 8000fc4:	200000ad 	.word	0x200000ad
 8000fc8:	20000002 	.word	0x20000002
 8000fcc:	200000ab 	.word	0x200000ab
 8000fd0:	08005874 	.word	0x08005874

08000fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b094      	sub	sp, #80	; 0x50
 8000fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fda:	f107 0320 	add.w	r3, r7, #32
 8000fde:	2230      	movs	r2, #48	; 0x30
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f004 f820 	bl	8005028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	4b27      	ldr	r3, [pc, #156]	; (800109c <SystemClock_Config+0xc8>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	4a26      	ldr	r2, [pc, #152]	; (800109c <SystemClock_Config+0xc8>)
 8001002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001006:	6413      	str	r3, [r2, #64]	; 0x40
 8001008:	4b24      	ldr	r3, [pc, #144]	; (800109c <SystemClock_Config+0xc8>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001014:	2300      	movs	r3, #0
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <SystemClock_Config+0xcc>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a20      	ldr	r2, [pc, #128]	; (80010a0 <SystemClock_Config+0xcc>)
 800101e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <SystemClock_Config+0xcc>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001030:	2302      	movs	r3, #2
 8001032:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001034:	2301      	movs	r3, #1
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001038:	2310      	movs	r3, #16
 800103a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103c:	2302      	movs	r3, #2
 800103e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001040:	2300      	movs	r3, #0
 8001042:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001044:	2308      	movs	r3, #8
 8001046:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001048:	2348      	movs	r3, #72	; 0x48
 800104a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800104c:	2302      	movs	r3, #2
 800104e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001050:	2304      	movs	r3, #4
 8001052:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001054:	f107 0320 	add.w	r3, r7, #32
 8001058:	4618      	mov	r0, r3
 800105a:	f001 faa7 	bl	80025ac <HAL_RCC_OscConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001064:	f000 fb8a 	bl	800177c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001068:	230f      	movs	r3, #15
 800106a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106c:	2302      	movs	r3, #2
 800106e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001078:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	2102      	movs	r1, #2
 8001084:	4618      	mov	r0, r3
 8001086:	f001 fd01 	bl	8002a8c <HAL_RCC_ClockConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001090:	f000 fb74 	bl	800177c <Error_Handler>
  }
}
 8001094:	bf00      	nop
 8001096:	3750      	adds	r7, #80	; 0x50
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40023800 	.word	0x40023800
 80010a0:	40007000 	.word	0x40007000

080010a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010aa:	4a13      	ldr	r2, [pc, #76]	; (80010f8 <MX_I2C1_Init+0x54>)
 80010ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010b0:	4a12      	ldr	r2, [pc, #72]	; (80010fc <MX_I2C1_Init+0x58>)
 80010b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010dc:	2200      	movs	r2, #0
 80010de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010e0:	4804      	ldr	r0, [pc, #16]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010e2:	f001 f92b 	bl	800233c <HAL_I2C_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010ec:	f000 fb46 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200000bc 	.word	0x200000bc
 80010f8:	40005400 	.word	0x40005400
 80010fc:	000186a0 	.word	0x000186a0

08001100 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001110:	463b      	mov	r3, r7
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800111c:	4b27      	ldr	r3, [pc, #156]	; (80011bc <MX_TIM1_Init+0xbc>)
 800111e:	4a28      	ldr	r2, [pc, #160]	; (80011c0 <MX_TIM1_Init+0xc0>)
 8001120:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001122:	4b26      	ldr	r3, [pc, #152]	; (80011bc <MX_TIM1_Init+0xbc>)
 8001124:	2247      	movs	r2, #71	; 0x47
 8001126:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001128:	4b24      	ldr	r3, [pc, #144]	; (80011bc <MX_TIM1_Init+0xbc>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 800112e:	4b23      	ldr	r3, [pc, #140]	; (80011bc <MX_TIM1_Init+0xbc>)
 8001130:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001134:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001136:	4b21      	ldr	r3, [pc, #132]	; (80011bc <MX_TIM1_Init+0xbc>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <MX_TIM1_Init+0xbc>)
 800113e:	2200      	movs	r2, #0
 8001140:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001142:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <MX_TIM1_Init+0xbc>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001148:	481c      	ldr	r0, [pc, #112]	; (80011bc <MX_TIM1_Init+0xbc>)
 800114a:	f001 ff23 	bl	8002f94 <HAL_TIM_IC_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001154:	f000 fb12 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001158:	2300      	movs	r3, #0
 800115a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4619      	mov	r1, r3
 8001166:	4815      	ldr	r0, [pc, #84]	; (80011bc <MX_TIM1_Init+0xbc>)
 8001168:	f002 ff20 	bl	8003fac <HAL_TIMEx_MasterConfigSynchronization>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001172:	f000 fb03 	bl	800177c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001176:	2300      	movs	r3, #0
 8001178:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800117a:	2301      	movs	r3, #1
 800117c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800117e:	2300      	movs	r3, #0
 8001180:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001186:	463b      	mov	r3, r7
 8001188:	2200      	movs	r2, #0
 800118a:	4619      	mov	r1, r3
 800118c:	480b      	ldr	r0, [pc, #44]	; (80011bc <MX_TIM1_Init+0xbc>)
 800118e:	f002 f89d 	bl	80032cc <HAL_TIM_IC_ConfigChannel>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001198:	f000 faf0 	bl	800177c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800119c:	463b      	mov	r3, r7
 800119e:	220c      	movs	r2, #12
 80011a0:	4619      	mov	r1, r3
 80011a2:	4806      	ldr	r0, [pc, #24]	; (80011bc <MX_TIM1_Init+0xbc>)
 80011a4:	f002 f892 	bl	80032cc <HAL_TIM_IC_ConfigChannel>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 80011ae:	f000 fae5 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000158 	.word	0x20000158
 80011c0:	40010000 	.word	0x40010000

080011c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08e      	sub	sp, #56	; 0x38
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d8:	f107 0320 	add.w	r3, r7, #32
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
 80011f0:	615a      	str	r2, [r3, #20]
 80011f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011f4:	4b2d      	ldr	r3, [pc, #180]	; (80012ac <MX_TIM3_Init+0xe8>)
 80011f6:	4a2e      	ldr	r2, [pc, #184]	; (80012b0 <MX_TIM3_Init+0xec>)
 80011f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1405;
 80011fa:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <MX_TIM3_Init+0xe8>)
 80011fc:	f240 527d 	movw	r2, #1405	; 0x57d
 8001200:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001202:	4b2a      	ldr	r3, [pc, #168]	; (80012ac <MX_TIM3_Init+0xe8>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1023;
 8001208:	4b28      	ldr	r3, [pc, #160]	; (80012ac <MX_TIM3_Init+0xe8>)
 800120a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800120e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001210:	4b26      	ldr	r3, [pc, #152]	; (80012ac <MX_TIM3_Init+0xe8>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001216:	4b25      	ldr	r3, [pc, #148]	; (80012ac <MX_TIM3_Init+0xe8>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800121c:	4823      	ldr	r0, [pc, #140]	; (80012ac <MX_TIM3_Init+0xe8>)
 800121e:	f001 fe27 	bl	8002e70 <HAL_TIM_Base_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001228:	f000 faa8 	bl	800177c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001230:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001236:	4619      	mov	r1, r3
 8001238:	481c      	ldr	r0, [pc, #112]	; (80012ac <MX_TIM3_Init+0xe8>)
 800123a:	f002 f9a9 	bl	8003590 <HAL_TIM_ConfigClockSource>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001244:	f000 fa9a 	bl	800177c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001248:	4818      	ldr	r0, [pc, #96]	; (80012ac <MX_TIM3_Init+0xe8>)
 800124a:	f001 fe3c 	bl	8002ec6 <HAL_TIM_PWM_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001254:	f000 fa92 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001258:	2300      	movs	r3, #0
 800125a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001260:	f107 0320 	add.w	r3, r7, #32
 8001264:	4619      	mov	r1, r3
 8001266:	4811      	ldr	r0, [pc, #68]	; (80012ac <MX_TIM3_Init+0xe8>)
 8001268:	f002 fea0 	bl	8003fac <HAL_TIMEx_MasterConfigSynchronization>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001272:	f000 fa83 	bl	800177c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001276:	2360      	movs	r3, #96	; 0x60
 8001278:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25;
 800127a:	2319      	movs	r3, #25
 800127c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	2200      	movs	r2, #0
 800128a:	4619      	mov	r1, r3
 800128c:	4807      	ldr	r0, [pc, #28]	; (80012ac <MX_TIM3_Init+0xe8>)
 800128e:	f002 f8b9 	bl	8003404 <HAL_TIM_PWM_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001298:	f000 fa70 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800129c:	4803      	ldr	r0, [pc, #12]	; (80012ac <MX_TIM3_Init+0xe8>)
 800129e:	f000 fb59 	bl	8001954 <HAL_TIM_MspPostInit>

}
 80012a2:	bf00      	nop
 80012a4:	3738      	adds	r7, #56	; 0x38
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000110 	.word	0x20000110
 80012b0:	40000400 	.word	0x40000400

080012b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012ba:	4a12      	ldr	r2, [pc, #72]	; (8001304 <MX_USART2_UART_Init+0x50>)
 80012bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012da:	220c      	movs	r2, #12
 80012dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012ec:	f002 fee0 	bl	80040b0 <HAL_UART_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012f6:	f000 fa41 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200001d8 	.word	0x200001d8
 8001304:	40004400 	.word	0x40004400

08001308 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <MX_USART6_UART_Init+0x4c>)
 800130e:	4a12      	ldr	r2, [pc, #72]	; (8001358 <MX_USART6_UART_Init+0x50>)
 8001310:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <MX_USART6_UART_Init+0x4c>)
 8001314:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001318:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <MX_USART6_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <MX_USART6_UART_Init+0x4c>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <MX_USART6_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <MX_USART6_UART_Init+0x4c>)
 800132e:	220c      	movs	r2, #12
 8001330:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <MX_USART6_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <MX_USART6_UART_Init+0x4c>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_USART6_UART_Init+0x4c>)
 8001340:	f002 feb6 	bl	80040b0 <HAL_UART_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800134a:	f000 fa17 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000198 	.word	0x20000198
 8001358:	40011400 	.word	0x40011400

0800135c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	4b36      	ldr	r3, [pc, #216]	; (8001450 <MX_GPIO_Init+0xf4>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a35      	ldr	r2, [pc, #212]	; (8001450 <MX_GPIO_Init+0xf4>)
 800137c:	f043 0304 	orr.w	r3, r3, #4
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b33      	ldr	r3, [pc, #204]	; (8001450 <MX_GPIO_Init+0xf4>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b2f      	ldr	r3, [pc, #188]	; (8001450 <MX_GPIO_Init+0xf4>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a2e      	ldr	r2, [pc, #184]	; (8001450 <MX_GPIO_Init+0xf4>)
 8001398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b2c      	ldr	r3, [pc, #176]	; (8001450 <MX_GPIO_Init+0xf4>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	4b28      	ldr	r3, [pc, #160]	; (8001450 <MX_GPIO_Init+0xf4>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a27      	ldr	r2, [pc, #156]	; (8001450 <MX_GPIO_Init+0xf4>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b25      	ldr	r3, [pc, #148]	; (8001450 <MX_GPIO_Init+0xf4>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	4b21      	ldr	r3, [pc, #132]	; (8001450 <MX_GPIO_Init+0xf4>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a20      	ldr	r2, [pc, #128]	; (8001450 <MX_GPIO_Init+0xf4>)
 80013d0:	f043 0302 	orr.w	r3, r3, #2
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <MX_GPIO_Init+0xf4>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80013e8:	481a      	ldr	r0, [pc, #104]	; (8001454 <MX_GPIO_Init+0xf8>)
 80013ea:	f000 ff8d 	bl	8002308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013f4:	4b18      	ldr	r3, [pc, #96]	; (8001458 <MX_GPIO_Init+0xfc>)
 80013f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4619      	mov	r1, r3
 8001402:	4816      	ldr	r0, [pc, #88]	; (800145c <MX_GPIO_Init+0x100>)
 8001404:	f000 fdfe 	bl	8002004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001408:	2301      	movs	r3, #1
 800140a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001418:	2301      	movs	r3, #1
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4619      	mov	r1, r3
 8001422:	480c      	ldr	r0, [pc, #48]	; (8001454 <MX_GPIO_Init+0xf8>)
 8001424:	f000 fdee 	bl	8002004 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|GPIO_PIN_10;
 8001428:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 800142c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142e:	2301      	movs	r3, #1
 8001430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	4804      	ldr	r0, [pc, #16]	; (8001454 <MX_GPIO_Init+0xf8>)
 8001442:	f000 fddf 	bl	8002004 <HAL_GPIO_Init>

}
 8001446:	bf00      	nop
 8001448:	3728      	adds	r7, #40	; 0x28
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800
 8001454:	40020000 	.word	0x40020000
 8001458:	10210000 	.word	0x10210000
 800145c:	40020800 	.word	0x40020800

08001460 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  // if the interrupt source is channel1
if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	7f1b      	ldrb	r3, [r3, #28]
 800146c:	2b01      	cmp	r3, #1
 800146e:	f040 8085 	bne.w	800157c <HAL_TIM_IC_CaptureCallback+0x11c>
  // if the first value is not captured
if (Is_First_Captured == 0) {
 8001472:	4b8b      	ldr	r3, [pc, #556]	; (80016a0 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d11a      	bne.n	80014b0 <HAL_TIM_IC_CaptureCallback+0x50>
IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 800147a:	2100      	movs	r1, #0
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f002 f93f 	bl	8003700 <HAL_TIM_ReadCapturedValue>
 8001482:	4602      	mov	r2, r0
 8001484:	4b87      	ldr	r3, [pc, #540]	; (80016a4 <HAL_TIM_IC_CaptureCallback+0x244>)
 8001486:	601a      	str	r2, [r3, #0]
Is_First_Captured = 1;  // set the first captured as true
 8001488:	4b85      	ldr	r3, [pc, #532]	; (80016a0 <HAL_TIM_IC_CaptureCallback+0x240>)
 800148a:	2201      	movs	r2, #1
 800148c:	701a      	strb	r2, [r3, #0]
// Now change the polarity to falling edge
__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	6a1a      	ldr	r2, [r3, #32]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 020a 	bic.w	r2, r2, #10
 800149c:	621a      	str	r2, [r3, #32]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6a1a      	ldr	r2, [r3, #32]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f042 0202 	orr.w	r2, r2, #2
 80014ac:	621a      	str	r2, [r3, #32]
__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC4);
}
}


}
 80014ae:	e0ed      	b.n	800168c <HAL_TIM_IC_CaptureCallback+0x22c>
else if (Is_First_Captured == 1) {
 80014b0:	4b7b      	ldr	r3, [pc, #492]	; (80016a0 <HAL_TIM_IC_CaptureCallback+0x240>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	f040 80e9 	bne.w	800168c <HAL_TIM_IC_CaptureCallback+0x22c>
IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 80014ba:	2100      	movs	r1, #0
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f002 f91f 	bl	8003700 <HAL_TIM_ReadCapturedValue>
 80014c2:	4602      	mov	r2, r0
 80014c4:	4b78      	ldr	r3, [pc, #480]	; (80016a8 <HAL_TIM_IC_CaptureCallback+0x248>)
 80014c6:	601a      	str	r2, [r3, #0]
__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2200      	movs	r2, #0
 80014ce:	625a      	str	r2, [r3, #36]	; 0x24
if (IC_Val2 > IC_Val1) {
 80014d0:	4b75      	ldr	r3, [pc, #468]	; (80016a8 <HAL_TIM_IC_CaptureCallback+0x248>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b73      	ldr	r3, [pc, #460]	; (80016a4 <HAL_TIM_IC_CaptureCallback+0x244>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d907      	bls.n	80014ec <HAL_TIM_IC_CaptureCallback+0x8c>
Difference = IC_Val2 - IC_Val1;
 80014dc:	4b72      	ldr	r3, [pc, #456]	; (80016a8 <HAL_TIM_IC_CaptureCallback+0x248>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b70      	ldr	r3, [pc, #448]	; (80016a4 <HAL_TIM_IC_CaptureCallback+0x244>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	4a71      	ldr	r2, [pc, #452]	; (80016ac <HAL_TIM_IC_CaptureCallback+0x24c>)
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	e00f      	b.n	800150c <HAL_TIM_IC_CaptureCallback+0xac>
} else if (IC_Val1 > IC_Val2) {
 80014ec:	4b6d      	ldr	r3, [pc, #436]	; (80016a4 <HAL_TIM_IC_CaptureCallback+0x244>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b6d      	ldr	r3, [pc, #436]	; (80016a8 <HAL_TIM_IC_CaptureCallback+0x248>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d909      	bls.n	800150c <HAL_TIM_IC_CaptureCallback+0xac>
Difference = (0xffff - IC_Val1) + IC_Val2;
 80014f8:	4b6b      	ldr	r3, [pc, #428]	; (80016a8 <HAL_TIM_IC_CaptureCallback+0x248>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b69      	ldr	r3, [pc, #420]	; (80016a4 <HAL_TIM_IC_CaptureCallback+0x244>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001506:	33ff      	adds	r3, #255	; 0xff
 8001508:	4a68      	ldr	r2, [pc, #416]	; (80016ac <HAL_TIM_IC_CaptureCallback+0x24c>)
 800150a:	6013      	str	r3, [r2, #0]
Distance = Difference * .034 / 2;
 800150c:	4b67      	ldr	r3, [pc, #412]	; (80016ac <HAL_TIM_IC_CaptureCallback+0x24c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff f80f 	bl	8000534 <__aeabi_ui2d>
 8001516:	a360      	add	r3, pc, #384	; (adr r3, 8001698 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151c:	f7ff f884 	bl	8000628 <__aeabi_dmul>
 8001520:	4603      	mov	r3, r0
 8001522:	460c      	mov	r4, r1
 8001524:	4618      	mov	r0, r3
 8001526:	4621      	mov	r1, r4
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001530:	f7ff f9a4 	bl	800087c <__aeabi_ddiv>
 8001534:	4603      	mov	r3, r0
 8001536:	460c      	mov	r4, r1
 8001538:	4618      	mov	r0, r3
 800153a:	4621      	mov	r1, r4
 800153c:	f7ff fa86 	bl	8000a4c <__aeabi_d2uiz>
 8001540:	4603      	mov	r3, r0
 8001542:	b2da      	uxtb	r2, r3
 8001544:	4b5a      	ldr	r3, [pc, #360]	; (80016b0 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001546:	701a      	strb	r2, [r3, #0]
Is_First_Captured = 0; // set it back to false
 8001548:	4b55      	ldr	r3, [pc, #340]	; (80016a0 <HAL_TIM_IC_CaptureCallback+0x240>)
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]
__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6a1a      	ldr	r2, [r3, #32]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 020a 	bic.w	r2, r2, #10
 800155c:	621a      	str	r2, [r3, #32]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6a12      	ldr	r2, [r2, #32]
 8001568:	621a      	str	r2, [r3, #32]
__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 800156a:	4b52      	ldr	r3, [pc, #328]	; (80016b4 <HAL_TIM_IC_CaptureCallback+0x254>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68da      	ldr	r2, [r3, #12]
 8001570:	4b50      	ldr	r3, [pc, #320]	; (80016b4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0202 	bic.w	r2, r2, #2
 8001578:	60da      	str	r2, [r3, #12]
}
 800157a:	e087      	b.n	800168c <HAL_TIM_IC_CaptureCallback+0x22c>
else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	7f1b      	ldrb	r3, [r3, #28]
 8001580:	2b08      	cmp	r3, #8
 8001582:	f040 8083 	bne.w	800168c <HAL_TIM_IC_CaptureCallback+0x22c>
if (Is_Second_Captured == 0) {
 8001586:	4b4c      	ldr	r3, [pc, #304]	; (80016b8 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d11a      	bne.n	80015c4 <HAL_TIM_IC_CaptureCallback+0x164>
IC_Val12 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4); // read the first value
 800158e:	210c      	movs	r1, #12
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f002 f8b5 	bl	8003700 <HAL_TIM_ReadCapturedValue>
 8001596:	4602      	mov	r2, r0
 8001598:	4b48      	ldr	r3, [pc, #288]	; (80016bc <HAL_TIM_IC_CaptureCallback+0x25c>)
 800159a:	601a      	str	r2, [r3, #0]
Is_Second_Captured = 1;  // set the first captured as true
 800159c:	4b46      	ldr	r3, [pc, #280]	; (80016b8 <HAL_TIM_IC_CaptureCallback+0x258>)
 800159e:	2201      	movs	r2, #1
 80015a0:	701a      	strb	r2, [r3, #0]
__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4,
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6a1a      	ldr	r2, [r3, #32]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 80015b0:	621a      	str	r2, [r3, #32]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6a1a      	ldr	r2, [r3, #32]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015c0:	621a      	str	r2, [r3, #32]
}
 80015c2:	e063      	b.n	800168c <HAL_TIM_IC_CaptureCallback+0x22c>
else if (Is_Second_Captured == 1) {
 80015c4:	4b3c      	ldr	r3, [pc, #240]	; (80016b8 <HAL_TIM_IC_CaptureCallback+0x258>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d15f      	bne.n	800168c <HAL_TIM_IC_CaptureCallback+0x22c>
IC_Val22 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4); // read second value
 80015cc:	210c      	movs	r1, #12
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f002 f896 	bl	8003700 <HAL_TIM_ReadCapturedValue>
 80015d4:	4602      	mov	r2, r0
 80015d6:	4b3a      	ldr	r3, [pc, #232]	; (80016c0 <HAL_TIM_IC_CaptureCallback+0x260>)
 80015d8:	601a      	str	r2, [r3, #0]
__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2200      	movs	r2, #0
 80015e0:	625a      	str	r2, [r3, #36]	; 0x24
if (IC_Val22 > IC_Val12) {
 80015e2:	4b37      	ldr	r3, [pc, #220]	; (80016c0 <HAL_TIM_IC_CaptureCallback+0x260>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	4b35      	ldr	r3, [pc, #212]	; (80016bc <HAL_TIM_IC_CaptureCallback+0x25c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d907      	bls.n	80015fe <HAL_TIM_IC_CaptureCallback+0x19e>
Difference2 = IC_Val22 - IC_Val12;
 80015ee:	4b34      	ldr	r3, [pc, #208]	; (80016c0 <HAL_TIM_IC_CaptureCallback+0x260>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	4b32      	ldr	r3, [pc, #200]	; (80016bc <HAL_TIM_IC_CaptureCallback+0x25c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	4a32      	ldr	r2, [pc, #200]	; (80016c4 <HAL_TIM_IC_CaptureCallback+0x264>)
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	e00f      	b.n	800161e <HAL_TIM_IC_CaptureCallback+0x1be>
} else if (IC_Val12 > IC_Val22) {
 80015fe:	4b2f      	ldr	r3, [pc, #188]	; (80016bc <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4b2f      	ldr	r3, [pc, #188]	; (80016c0 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	429a      	cmp	r2, r3
 8001608:	d909      	bls.n	800161e <HAL_TIM_IC_CaptureCallback+0x1be>
Difference2 = (0xffff - IC_Val12) + IC_Val22;
 800160a:	4b2d      	ldr	r3, [pc, #180]	; (80016c0 <HAL_TIM_IC_CaptureCallback+0x260>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4b2b      	ldr	r3, [pc, #172]	; (80016bc <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001618:	33ff      	adds	r3, #255	; 0xff
 800161a:	4a2a      	ldr	r2, [pc, #168]	; (80016c4 <HAL_TIM_IC_CaptureCallback+0x264>)
 800161c:	6013      	str	r3, [r2, #0]
Distance2 = Difference2 * .034 / 2;
 800161e:	4b29      	ldr	r3, [pc, #164]	; (80016c4 <HAL_TIM_IC_CaptureCallback+0x264>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe ff86 	bl	8000534 <__aeabi_ui2d>
 8001628:	a31b      	add	r3, pc, #108	; (adr r3, 8001698 <HAL_TIM_IC_CaptureCallback+0x238>)
 800162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162e:	f7fe fffb 	bl	8000628 <__aeabi_dmul>
 8001632:	4603      	mov	r3, r0
 8001634:	460c      	mov	r4, r1
 8001636:	4618      	mov	r0, r3
 8001638:	4621      	mov	r1, r4
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001642:	f7ff f91b 	bl	800087c <__aeabi_ddiv>
 8001646:	4603      	mov	r3, r0
 8001648:	460c      	mov	r4, r1
 800164a:	4618      	mov	r0, r3
 800164c:	4621      	mov	r1, r4
 800164e:	f7ff f9fd 	bl	8000a4c <__aeabi_d2uiz>
 8001652:	4603      	mov	r3, r0
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <HAL_TIM_IC_CaptureCallback+0x268>)
 8001658:	701a      	strb	r2, [r3, #0]
Is_Second_Captured = 0; // set it back to false
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <HAL_TIM_IC_CaptureCallback+0x258>)
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]
__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4,
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6a1a      	ldr	r2, [r3, #32]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 800166e:	621a      	str	r2, [r3, #32]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6a12      	ldr	r2, [r2, #32]
 800167a:	621a      	str	r2, [r3, #32]
__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC4);
 800167c:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <HAL_TIM_IC_CaptureCallback+0x254>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68da      	ldr	r2, [r3, #12]
 8001682:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0210 	bic.w	r2, r2, #16
 800168a:	60da      	str	r2, [r3, #12]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	bd90      	pop	{r4, r7, pc}
 8001694:	f3af 8000 	nop.w
 8001698:	b020c49c 	.word	0xb020c49c
 800169c:	3fa16872 	.word	0x3fa16872
 80016a0:	200000a8 	.word	0x200000a8
 80016a4:	20000090 	.word	0x20000090
 80016a8:	20000094 	.word	0x20000094
 80016ac:	200000a0 	.word	0x200000a0
 80016b0:	200000aa 	.word	0x200000aa
 80016b4:	20000158 	.word	0x20000158
 80016b8:	200000a9 	.word	0x200000a9
 80016bc:	20000098 	.word	0x20000098
 80016c0:	2000009c 	.word	0x2000009c
 80016c4:	200000a4 	.word	0x200000a4
 80016c8:	200000ab 	.word	0x200000ab

080016cc <HCSR04_Read>:

void HCSR04_Read(void) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET); // pull the TRIG pin HIGH
 80016d0:	2201      	movs	r2, #1
 80016d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016d6:	480b      	ldr	r0, [pc, #44]	; (8001704 <HCSR04_Read+0x38>)
 80016d8:	f000 fe16 	bl	8002308 <HAL_GPIO_WritePin>
delay(10);  // wait for 10 us
 80016dc:	200a      	movs	r0, #10
 80016de:	f000 f835 	bl	800174c <delay>
HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 80016e2:	2200      	movs	r2, #0
 80016e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016e8:	4806      	ldr	r0, [pc, #24]	; (8001704 <HCSR04_Read+0x38>)
 80016ea:	f000 fe0d 	bl	8002308 <HAL_GPIO_WritePin>

__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HCSR04_Read+0x3c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	68da      	ldr	r2, [r3, #12]
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <HCSR04_Read+0x3c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f042 0202 	orr.w	r2, r2, #2
 80016fc:	60da      	str	r2, [r3, #12]

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40020000 	.word	0x40020000
 8001708:	20000158 	.word	0x20000158

0800170c <HCSR04_Read2>:

void HCSR04_Read2(void) {
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN2, GPIO_PIN_SET); // pull the TRIG pin HIGH
 8001710:	2201      	movs	r2, #1
 8001712:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001716:	480b      	ldr	r0, [pc, #44]	; (8001744 <HCSR04_Read2+0x38>)
 8001718:	f000 fdf6 	bl	8002308 <HAL_GPIO_WritePin>
delay(10);  // wait for 10 us
 800171c:	200a      	movs	r0, #10
 800171e:	f000 f815 	bl	800174c <delay>
HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN2, GPIO_PIN_RESET); // pull the TRIG pin low
 8001722:	2200      	movs	r2, #0
 8001724:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001728:	4806      	ldr	r0, [pc, #24]	; (8001744 <HCSR04_Read2+0x38>)
 800172a:	f000 fded 	bl	8002308 <HAL_GPIO_WritePin>

__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC4);
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HCSR04_Read2+0x3c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68da      	ldr	r2, [r3, #12]
 8001734:	4b04      	ldr	r3, [pc, #16]	; (8001748 <HCSR04_Read2+0x3c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f042 0210 	orr.w	r2, r2, #16
 800173c:	60da      	str	r2, [r3, #12]

}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40020000 	.word	0x40020000
 8001748:	20000158 	.word	0x20000158

0800174c <delay>:

void delay(uint16_t time) {
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	80fb      	strh	r3, [r7, #6]
__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001756:	4b08      	ldr	r3, [pc, #32]	; (8001778 <delay+0x2c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2200      	movs	r2, #0
 800175c:	625a      	str	r2, [r3, #36]	; 0x24
while (__HAL_TIM_GET_COUNTER(&htim1) < time)
 800175e:	bf00      	nop
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <delay+0x2c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	429a      	cmp	r2, r3
 800176a:	d3f9      	bcc.n	8001760 <delay+0x14>
;
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	20000158 	.word	0x20000158

0800177c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001780:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8001782:	e7fe      	b.n	8001782 <Error_Handler+0x6>

08001784 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <HAL_MspInit+0x4c>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	4a0f      	ldr	r2, [pc, #60]	; (80017d0 <HAL_MspInit+0x4c>)
 8001794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001798:	6453      	str	r3, [r2, #68]	; 0x44
 800179a:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <HAL_MspInit+0x4c>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	603b      	str	r3, [r7, #0]
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <HAL_MspInit+0x4c>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <HAL_MspInit+0x4c>)
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_MspInit+0x4c>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017c2:	2007      	movs	r0, #7
 80017c4:	f000 fbba 	bl	8001f3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40023800 	.word	0x40023800

080017d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a19      	ldr	r2, [pc, #100]	; (8001858 <HAL_I2C_MspInit+0x84>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d12b      	bne.n	800184e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	4b18      	ldr	r3, [pc, #96]	; (800185c <HAL_I2C_MspInit+0x88>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a17      	ldr	r2, [pc, #92]	; (800185c <HAL_I2C_MspInit+0x88>)
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <HAL_I2C_MspInit+0x88>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001812:	23c0      	movs	r3, #192	; 0xc0
 8001814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001816:	2312      	movs	r3, #18
 8001818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800181a:	2301      	movs	r3, #1
 800181c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181e:	2303      	movs	r3, #3
 8001820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001822:	2304      	movs	r3, #4
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4619      	mov	r1, r3
 800182c:	480c      	ldr	r0, [pc, #48]	; (8001860 <HAL_I2C_MspInit+0x8c>)
 800182e:	f000 fbe9 	bl	8002004 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_I2C_MspInit+0x88>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	4a08      	ldr	r2, [pc, #32]	; (800185c <HAL_I2C_MspInit+0x88>)
 800183c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001840:	6413      	str	r3, [r2, #64]	; 0x40
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_I2C_MspInit+0x88>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800184e:	bf00      	nop
 8001850:	3728      	adds	r7, #40	; 0x28
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40005400 	.word	0x40005400
 800185c:	40023800 	.word	0x40023800
 8001860:	40020400 	.word	0x40020400

08001864 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	; 0x28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a1d      	ldr	r2, [pc, #116]	; (80018f8 <HAL_TIM_IC_MspInit+0x94>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d134      	bne.n	80018f0 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	4b1c      	ldr	r3, [pc, #112]	; (80018fc <HAL_TIM_IC_MspInit+0x98>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	4a1b      	ldr	r2, [pc, #108]	; (80018fc <HAL_TIM_IC_MspInit+0x98>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6453      	str	r3, [r2, #68]	; 0x44
 8001896:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_TIM_IC_MspInit+0x98>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <HAL_TIM_IC_MspInit+0x98>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a14      	ldr	r2, [pc, #80]	; (80018fc <HAL_TIM_IC_MspInit+0x98>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_TIM_IC_MspInit+0x98>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80018be:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80018c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2300      	movs	r3, #0
 80018ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018d0:	2301      	movs	r3, #1
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	4619      	mov	r1, r3
 80018da:	4809      	ldr	r0, [pc, #36]	; (8001900 <HAL_TIM_IC_MspInit+0x9c>)
 80018dc:	f000 fb92 	bl	8002004 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2100      	movs	r1, #0
 80018e4:	201b      	movs	r0, #27
 80018e6:	f000 fb34 	bl	8001f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80018ea:	201b      	movs	r0, #27
 80018ec:	f000 fb4d 	bl	8001f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80018f0:	bf00      	nop
 80018f2:	3728      	adds	r7, #40	; 0x28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40010000 	.word	0x40010000
 80018fc:	40023800 	.word	0x40023800
 8001900:	40020000 	.word	0x40020000

08001904 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a0e      	ldr	r2, [pc, #56]	; (800194c <HAL_TIM_Base_MspInit+0x48>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d115      	bne.n	8001942 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <HAL_TIM_Base_MspInit+0x4c>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	4a0c      	ldr	r2, [pc, #48]	; (8001950 <HAL_TIM_Base_MspInit+0x4c>)
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	6413      	str	r3, [r2, #64]	; 0x40
 8001926:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <HAL_TIM_Base_MspInit+0x4c>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	201d      	movs	r0, #29
 8001938:	f000 fb0b 	bl	8001f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800193c:	201d      	movs	r0, #29
 800193e:	f000 fb24 	bl	8001f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40000400 	.word	0x40000400
 8001950:	40023800 	.word	0x40023800

08001954 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 030c 	add.w	r3, r7, #12
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a12      	ldr	r2, [pc, #72]	; (80019bc <HAL_TIM_MspPostInit+0x68>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d11d      	bne.n	80019b2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <HAL_TIM_MspPostInit+0x6c>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a10      	ldr	r2, [pc, #64]	; (80019c0 <HAL_TIM_MspPostInit+0x6c>)
 8001980:	f043 0302 	orr.w	r3, r3, #2
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <HAL_TIM_MspPostInit+0x6c>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001992:	2310      	movs	r3, #16
 8001994:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2300      	movs	r3, #0
 80019a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019a2:	2302      	movs	r3, #2
 80019a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a6:	f107 030c 	add.w	r3, r7, #12
 80019aa:	4619      	mov	r1, r3
 80019ac:	4805      	ldr	r0, [pc, #20]	; (80019c4 <HAL_TIM_MspPostInit+0x70>)
 80019ae:	f000 fb29 	bl	8002004 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80019b2:	bf00      	nop
 80019b4:	3720      	adds	r7, #32
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40000400 	.word	0x40000400
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40020400 	.word	0x40020400

080019c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08c      	sub	sp, #48	; 0x30
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 031c 	add.w	r3, r7, #28
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a3a      	ldr	r2, [pc, #232]	; (8001ad0 <HAL_UART_MspInit+0x108>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d134      	bne.n	8001a54 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
 80019ee:	4b39      	ldr	r3, [pc, #228]	; (8001ad4 <HAL_UART_MspInit+0x10c>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	4a38      	ldr	r2, [pc, #224]	; (8001ad4 <HAL_UART_MspInit+0x10c>)
 80019f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f8:	6413      	str	r3, [r2, #64]	; 0x40
 80019fa:	4b36      	ldr	r3, [pc, #216]	; (8001ad4 <HAL_UART_MspInit+0x10c>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	61bb      	str	r3, [r7, #24]
 8001a04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	4b32      	ldr	r3, [pc, #200]	; (8001ad4 <HAL_UART_MspInit+0x10c>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	4a31      	ldr	r2, [pc, #196]	; (8001ad4 <HAL_UART_MspInit+0x10c>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6313      	str	r3, [r2, #48]	; 0x30
 8001a16:	4b2f      	ldr	r3, [pc, #188]	; (8001ad4 <HAL_UART_MspInit+0x10c>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a22:	230c      	movs	r3, #12
 8001a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a26:	2302      	movs	r3, #2
 8001a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a32:	2307      	movs	r3, #7
 8001a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a36:	f107 031c 	add.w	r3, r7, #28
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4826      	ldr	r0, [pc, #152]	; (8001ad8 <HAL_UART_MspInit+0x110>)
 8001a3e:	f000 fae1 	bl	8002004 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2100      	movs	r1, #0
 8001a46:	2026      	movs	r0, #38	; 0x26
 8001a48:	f000 fa83 	bl	8001f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a4c:	2026      	movs	r0, #38	; 0x26
 8001a4e:	f000 fa9c 	bl	8001f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001a52:	e038      	b.n	8001ac6 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a20      	ldr	r2, [pc, #128]	; (8001adc <HAL_UART_MspInit+0x114>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d133      	bne.n	8001ac6 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <HAL_UART_MspInit+0x10c>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	4a1b      	ldr	r2, [pc, #108]	; (8001ad4 <HAL_UART_MspInit+0x10c>)
 8001a68:	f043 0320 	orr.w	r3, r3, #32
 8001a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a6e:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <HAL_UART_MspInit+0x10c>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	f003 0320 	and.w	r3, r3, #32
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <HAL_UART_MspInit+0x10c>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a14      	ldr	r2, [pc, #80]	; (8001ad4 <HAL_UART_MspInit+0x10c>)
 8001a84:	f043 0304 	orr.w	r3, r3, #4
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_UART_MspInit+0x10c>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a96:	23c0      	movs	r3, #192	; 0xc0
 8001a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001aa6:	2308      	movs	r3, #8
 8001aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aaa:	f107 031c 	add.w	r3, r7, #28
 8001aae:	4619      	mov	r1, r3
 8001ab0:	480b      	ldr	r0, [pc, #44]	; (8001ae0 <HAL_UART_MspInit+0x118>)
 8001ab2:	f000 faa7 	bl	8002004 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2100      	movs	r1, #0
 8001aba:	2047      	movs	r0, #71	; 0x47
 8001abc:	f000 fa49 	bl	8001f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001ac0:	2047      	movs	r0, #71	; 0x47
 8001ac2:	f000 fa62 	bl	8001f8a <HAL_NVIC_EnableIRQ>
}
 8001ac6:	bf00      	nop
 8001ac8:	3730      	adds	r7, #48	; 0x30
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40004400 	.word	0x40004400
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40020000 	.word	0x40020000
 8001adc:	40011400 	.word	0x40011400
 8001ae0:	40020800 	.word	0x40020800

08001ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <NMI_Handler+0x4>

08001aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aee:	e7fe      	b.n	8001aee <HardFault_Handler+0x4>

08001af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <MemManage_Handler+0x4>

08001af6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001afa:	e7fe      	b.n	8001afa <BusFault_Handler+0x4>

08001afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <UsageFault_Handler+0x4>

08001b02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b30:	f000 f8f2 	bl	8001d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b3c:	4802      	ldr	r0, [pc, #8]	; (8001b48 <TIM1_CC_IRQHandler+0x10>)
 8001b3e:	f001 fabd 	bl	80030bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000158 	.word	0x20000158

08001b4c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b50:	4802      	ldr	r0, [pc, #8]	; (8001b5c <TIM3_IRQHandler+0x10>)
 8001b52:	f001 fab3 	bl	80030bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000110 	.word	0x20000110

08001b60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b64:	4802      	ldr	r0, [pc, #8]	; (8001b70 <USART2_IRQHandler+0x10>)
 8001b66:	f002 fc2f 	bl	80043c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	200001d8 	.word	0x200001d8

08001b74 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001b78:	4802      	ldr	r0, [pc, #8]	; (8001b84 <USART6_IRQHandler+0x10>)
 8001b7a:	f002 fc25 	bl	80043c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000198 	.word	0x20000198

08001b88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b90:	4a14      	ldr	r2, [pc, #80]	; (8001be4 <_sbrk+0x5c>)
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <_sbrk+0x60>)
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b9c:	4b13      	ldr	r3, [pc, #76]	; (8001bec <_sbrk+0x64>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d102      	bne.n	8001baa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <_sbrk+0x64>)
 8001ba6:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <_sbrk+0x68>)
 8001ba8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001baa:	4b10      	ldr	r3, [pc, #64]	; (8001bec <_sbrk+0x64>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d207      	bcs.n	8001bc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb8:	f003 fa0c 	bl	8004fd4 <__errno>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	230c      	movs	r3, #12
 8001bc0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc6:	e009      	b.n	8001bdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <_sbrk+0x64>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bce:	4b07      	ldr	r3, [pc, #28]	; (8001bec <_sbrk+0x64>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	4a05      	ldr	r2, [pc, #20]	; (8001bec <_sbrk+0x64>)
 8001bd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bda:	68fb      	ldr	r3, [r7, #12]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20020000 	.word	0x20020000
 8001be8:	00000400 	.word	0x00000400
 8001bec:	200000b0 	.word	0x200000b0
 8001bf0:	20000220 	.word	0x20000220

08001bf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <SystemInit+0x28>)
 8001bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bfe:	4a07      	ldr	r2, [pc, #28]	; (8001c1c <SystemInit+0x28>)
 8001c00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <SystemInit+0x28>)
 8001c0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c0e:	609a      	str	r2, [r3, #8]
#endif
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c58 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c26:	e003      	b.n	8001c30 <LoopCopyDataInit>

08001c28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c2e:	3104      	adds	r1, #4

08001c30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c30:	480b      	ldr	r0, [pc, #44]	; (8001c60 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c32:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c38:	d3f6      	bcc.n	8001c28 <CopyDataInit>
  ldr  r2, =_sbss
 8001c3a:	4a0b      	ldr	r2, [pc, #44]	; (8001c68 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c3c:	e002      	b.n	8001c44 <LoopFillZerobss>

08001c3e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c40:	f842 3b04 	str.w	r3, [r2], #4

08001c44 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c44:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c48:	d3f9      	bcc.n	8001c3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c4a:	f7ff ffd3 	bl	8001bf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c4e:	f003 f9c7 	bl	8004fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c52:	f7ff f89b 	bl	8000d8c <main>
  bx  lr    
 8001c56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c58:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001c5c:	080058d4 	.word	0x080058d4
  ldr  r0, =_sdata
 8001c60:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c64:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001c68:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001c6c:	20000220 	.word	0x20000220

08001c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c70:	e7fe      	b.n	8001c70 <ADC_IRQHandler>
	...

08001c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c78:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <HAL_Init+0x40>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0d      	ldr	r2, [pc, #52]	; (8001cb4 <HAL_Init+0x40>)
 8001c7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c84:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <HAL_Init+0x40>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <HAL_Init+0x40>)
 8001c8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c90:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <HAL_Init+0x40>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a07      	ldr	r2, [pc, #28]	; (8001cb4 <HAL_Init+0x40>)
 8001c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c9c:	2003      	movs	r0, #3
 8001c9e:	f000 f94d 	bl	8001f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	f000 f808 	bl	8001cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ca8:	f7ff fd6c 	bl	8001784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40023c00 	.word	0x40023c00

08001cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cc0:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <HAL_InitTick+0x54>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_InitTick+0x58>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 f965 	bl	8001fa6 <HAL_SYSTICK_Config>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e00e      	b.n	8001d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b0f      	cmp	r3, #15
 8001cea:	d80a      	bhi.n	8001d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cec:	2200      	movs	r2, #0
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf4:	f000 f92d 	bl	8001f52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cf8:	4a06      	ldr	r2, [pc, #24]	; (8001d14 <HAL_InitTick+0x5c>)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	e000      	b.n	8001d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20000004 	.word	0x20000004
 8001d10:	2000000c 	.word	0x2000000c
 8001d14:	20000008 	.word	0x20000008

08001d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <HAL_IncTick+0x20>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	461a      	mov	r2, r3
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_IncTick+0x24>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4413      	add	r3, r2
 8001d28:	4a04      	ldr	r2, [pc, #16]	; (8001d3c <HAL_IncTick+0x24>)
 8001d2a:	6013      	str	r3, [r2, #0]
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	2000000c 	.word	0x2000000c
 8001d3c:	20000218 	.word	0x20000218

08001d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return uwTick;
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <HAL_GetTick+0x14>)
 8001d46:	681b      	ldr	r3, [r3, #0]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	20000218 	.word	0x20000218

08001d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d60:	f7ff ffee 	bl	8001d40 <HAL_GetTick>
 8001d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d70:	d005      	beq.n	8001d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_Delay+0x40>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d7e:	bf00      	nop
 8001d80:	f7ff ffde 	bl	8001d40 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d8f7      	bhi.n	8001d80 <HAL_Delay+0x28>
  {
  }
}
 8001d90:	bf00      	nop
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	2000000c 	.word	0x2000000c

08001d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001db8:	4013      	ands	r3, r2
 8001dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dce:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	60d3      	str	r3, [r2, #12]
}
 8001dd4:	bf00      	nop
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de8:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <__NVIC_GetPriorityGrouping+0x18>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	0a1b      	lsrs	r3, r3, #8
 8001dee:	f003 0307 	and.w	r3, r3, #7
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	db0b      	blt.n	8001e2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	f003 021f 	and.w	r2, r3, #31
 8001e18:	4907      	ldr	r1, [pc, #28]	; (8001e38 <__NVIC_EnableIRQ+0x38>)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	2001      	movs	r0, #1
 8001e22:	fa00 f202 	lsl.w	r2, r0, r2
 8001e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000e100 	.word	0xe000e100

08001e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	db0a      	blt.n	8001e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	490c      	ldr	r1, [pc, #48]	; (8001e88 <__NVIC_SetPriority+0x4c>)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	0112      	lsls	r2, r2, #4
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	440b      	add	r3, r1
 8001e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e64:	e00a      	b.n	8001e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4908      	ldr	r1, [pc, #32]	; (8001e8c <__NVIC_SetPriority+0x50>)
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	3b04      	subs	r3, #4
 8001e74:	0112      	lsls	r2, r2, #4
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	440b      	add	r3, r1
 8001e7a:	761a      	strb	r2, [r3, #24]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000e100 	.word	0xe000e100
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b089      	sub	sp, #36	; 0x24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f1c3 0307 	rsb	r3, r3, #7
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	bf28      	it	cs
 8001eae:	2304      	movcs	r3, #4
 8001eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	2b06      	cmp	r3, #6
 8001eb8:	d902      	bls.n	8001ec0 <NVIC_EncodePriority+0x30>
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3b03      	subs	r3, #3
 8001ebe:	e000      	b.n	8001ec2 <NVIC_EncodePriority+0x32>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee2:	43d9      	mvns	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	4313      	orrs	r3, r2
         );
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3724      	adds	r7, #36	; 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f08:	d301      	bcc.n	8001f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e00f      	b.n	8001f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <SysTick_Config+0x40>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f16:	210f      	movs	r1, #15
 8001f18:	f04f 30ff 	mov.w	r0, #4294967295
 8001f1c:	f7ff ff8e 	bl	8001e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <SysTick_Config+0x40>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f26:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <SysTick_Config+0x40>)
 8001f28:	2207      	movs	r2, #7
 8001f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	e000e010 	.word	0xe000e010

08001f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff ff29 	bl	8001d9c <__NVIC_SetPriorityGrouping>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	4603      	mov	r3, r0
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	607a      	str	r2, [r7, #4]
 8001f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f64:	f7ff ff3e 	bl	8001de4 <__NVIC_GetPriorityGrouping>
 8001f68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	6978      	ldr	r0, [r7, #20]
 8001f70:	f7ff ff8e 	bl	8001e90 <NVIC_EncodePriority>
 8001f74:	4602      	mov	r2, r0
 8001f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff5d 	bl	8001e3c <__NVIC_SetPriority>
}
 8001f82:	bf00      	nop
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	4603      	mov	r3, r0
 8001f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff ff31 	bl	8001e00 <__NVIC_EnableIRQ>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff ffa2 	bl	8001ef8 <SysTick_Config>
 8001fb4:	4603      	mov	r3, r0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d004      	beq.n	8001fdc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2280      	movs	r2, #128	; 0x80
 8001fd6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e00c      	b.n	8001ff6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2205      	movs	r2, #5
 8001fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0201 	bic.w	r2, r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002004:	b480      	push	{r7}
 8002006:	b089      	sub	sp, #36	; 0x24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002016:	2300      	movs	r3, #0
 8002018:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
 800201e:	e159      	b.n	80022d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002020:	2201      	movs	r2, #1
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	4013      	ands	r3, r2
 8002032:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	429a      	cmp	r2, r3
 800203a:	f040 8148 	bne.w	80022ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d00b      	beq.n	800205e <HAL_GPIO_Init+0x5a>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b02      	cmp	r3, #2
 800204c:	d007      	beq.n	800205e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002052:	2b11      	cmp	r3, #17
 8002054:	d003      	beq.n	800205e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b12      	cmp	r3, #18
 800205c:	d130      	bne.n	80020c0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	2203      	movs	r2, #3
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002094:	2201      	movs	r2, #1
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	091b      	lsrs	r3, r3, #4
 80020aa:	f003 0201 	and.w	r2, r3, #1
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	2203      	movs	r2, #3
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_Init+0xfc>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b12      	cmp	r3, #18
 80020fe:	d123      	bne.n	8002148 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	08da      	lsrs	r2, r3, #3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3208      	adds	r2, #8
 8002108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800210c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	220f      	movs	r2, #15
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	691a      	ldr	r2, [r3, #16]
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	08da      	lsrs	r2, r3, #3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3208      	adds	r2, #8
 8002142:	69b9      	ldr	r1, [r7, #24]
 8002144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	2203      	movs	r2, #3
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 0203 	and.w	r2, r3, #3
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 80a2 	beq.w	80022ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	4b56      	ldr	r3, [pc, #344]	; (80022e8 <HAL_GPIO_Init+0x2e4>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002192:	4a55      	ldr	r2, [pc, #340]	; (80022e8 <HAL_GPIO_Init+0x2e4>)
 8002194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002198:	6453      	str	r3, [r2, #68]	; 0x44
 800219a:	4b53      	ldr	r3, [pc, #332]	; (80022e8 <HAL_GPIO_Init+0x2e4>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021a6:	4a51      	ldr	r2, [pc, #324]	; (80022ec <HAL_GPIO_Init+0x2e8>)
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	089b      	lsrs	r3, r3, #2
 80021ac:	3302      	adds	r3, #2
 80021ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	220f      	movs	r2, #15
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43db      	mvns	r3, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4013      	ands	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a48      	ldr	r2, [pc, #288]	; (80022f0 <HAL_GPIO_Init+0x2ec>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d019      	beq.n	8002206 <HAL_GPIO_Init+0x202>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a47      	ldr	r2, [pc, #284]	; (80022f4 <HAL_GPIO_Init+0x2f0>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d013      	beq.n	8002202 <HAL_GPIO_Init+0x1fe>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a46      	ldr	r2, [pc, #280]	; (80022f8 <HAL_GPIO_Init+0x2f4>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d00d      	beq.n	80021fe <HAL_GPIO_Init+0x1fa>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a45      	ldr	r2, [pc, #276]	; (80022fc <HAL_GPIO_Init+0x2f8>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d007      	beq.n	80021fa <HAL_GPIO_Init+0x1f6>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a44      	ldr	r2, [pc, #272]	; (8002300 <HAL_GPIO_Init+0x2fc>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d101      	bne.n	80021f6 <HAL_GPIO_Init+0x1f2>
 80021f2:	2304      	movs	r3, #4
 80021f4:	e008      	b.n	8002208 <HAL_GPIO_Init+0x204>
 80021f6:	2307      	movs	r3, #7
 80021f8:	e006      	b.n	8002208 <HAL_GPIO_Init+0x204>
 80021fa:	2303      	movs	r3, #3
 80021fc:	e004      	b.n	8002208 <HAL_GPIO_Init+0x204>
 80021fe:	2302      	movs	r3, #2
 8002200:	e002      	b.n	8002208 <HAL_GPIO_Init+0x204>
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <HAL_GPIO_Init+0x204>
 8002206:	2300      	movs	r3, #0
 8002208:	69fa      	ldr	r2, [r7, #28]
 800220a:	f002 0203 	and.w	r2, r2, #3
 800220e:	0092      	lsls	r2, r2, #2
 8002210:	4093      	lsls	r3, r2
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002218:	4934      	ldr	r1, [pc, #208]	; (80022ec <HAL_GPIO_Init+0x2e8>)
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	089b      	lsrs	r3, r3, #2
 800221e:	3302      	adds	r3, #2
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002226:	4b37      	ldr	r3, [pc, #220]	; (8002304 <HAL_GPIO_Init+0x300>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	43db      	mvns	r3, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4013      	ands	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800224a:	4a2e      	ldr	r2, [pc, #184]	; (8002304 <HAL_GPIO_Init+0x300>)
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002250:	4b2c      	ldr	r3, [pc, #176]	; (8002304 <HAL_GPIO_Init+0x300>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002274:	4a23      	ldr	r2, [pc, #140]	; (8002304 <HAL_GPIO_Init+0x300>)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800227a:	4b22      	ldr	r3, [pc, #136]	; (8002304 <HAL_GPIO_Init+0x300>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800229e:	4a19      	ldr	r2, [pc, #100]	; (8002304 <HAL_GPIO_Init+0x300>)
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022a4:	4b17      	ldr	r3, [pc, #92]	; (8002304 <HAL_GPIO_Init+0x300>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022c8:	4a0e      	ldr	r2, [pc, #56]	; (8002304 <HAL_GPIO_Init+0x300>)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3301      	adds	r3, #1
 80022d2:	61fb      	str	r3, [r7, #28]
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	2b0f      	cmp	r3, #15
 80022d8:	f67f aea2 	bls.w	8002020 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022dc:	bf00      	nop
 80022de:	3724      	adds	r7, #36	; 0x24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40013800 	.word	0x40013800
 80022f0:	40020000 	.word	0x40020000
 80022f4:	40020400 	.word	0x40020400
 80022f8:	40020800 	.word	0x40020800
 80022fc:	40020c00 	.word	0x40020c00
 8002300:	40021000 	.word	0x40021000
 8002304:	40013c00 	.word	0x40013c00

08002308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	807b      	strh	r3, [r7, #2]
 8002314:	4613      	mov	r3, r2
 8002316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002318:	787b      	ldrb	r3, [r7, #1]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231e:	887a      	ldrh	r2, [r7, #2]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002324:	e003      	b.n	800232e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002326:	887b      	ldrh	r3, [r7, #2]
 8002328:	041a      	lsls	r2, r3, #16
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	619a      	str	r2, [r3, #24]
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
	...

0800233c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e11f      	b.n	800258e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d106      	bne.n	8002368 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff fa36 	bl	80017d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2224      	movs	r2, #36	; 0x24
 800236c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0201 	bic.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800238e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800239e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023a0:	f000 fd3e 	bl	8002e20 <HAL_RCC_GetPCLK1Freq>
 80023a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	4a7b      	ldr	r2, [pc, #492]	; (8002598 <HAL_I2C_Init+0x25c>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d807      	bhi.n	80023c0 <HAL_I2C_Init+0x84>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4a7a      	ldr	r2, [pc, #488]	; (800259c <HAL_I2C_Init+0x260>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	bf94      	ite	ls
 80023b8:	2301      	movls	r3, #1
 80023ba:	2300      	movhi	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	e006      	b.n	80023ce <HAL_I2C_Init+0x92>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4a77      	ldr	r2, [pc, #476]	; (80025a0 <HAL_I2C_Init+0x264>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	bf94      	ite	ls
 80023c8:	2301      	movls	r3, #1
 80023ca:	2300      	movhi	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e0db      	b.n	800258e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	4a72      	ldr	r2, [pc, #456]	; (80025a4 <HAL_I2C_Init+0x268>)
 80023da:	fba2 2303 	umull	r2, r3, r2, r3
 80023de:	0c9b      	lsrs	r3, r3, #18
 80023e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	4a64      	ldr	r2, [pc, #400]	; (8002598 <HAL_I2C_Init+0x25c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d802      	bhi.n	8002410 <HAL_I2C_Init+0xd4>
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	3301      	adds	r3, #1
 800240e:	e009      	b.n	8002424 <HAL_I2C_Init+0xe8>
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002416:	fb02 f303 	mul.w	r3, r2, r3
 800241a:	4a63      	ldr	r2, [pc, #396]	; (80025a8 <HAL_I2C_Init+0x26c>)
 800241c:	fba2 2303 	umull	r2, r3, r2, r3
 8002420:	099b      	lsrs	r3, r3, #6
 8002422:	3301      	adds	r3, #1
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	430b      	orrs	r3, r1
 800242a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002436:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	4956      	ldr	r1, [pc, #344]	; (8002598 <HAL_I2C_Init+0x25c>)
 8002440:	428b      	cmp	r3, r1
 8002442:	d80d      	bhi.n	8002460 <HAL_I2C_Init+0x124>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	1e59      	subs	r1, r3, #1
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002452:	3301      	adds	r3, #1
 8002454:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002458:	2b04      	cmp	r3, #4
 800245a:	bf38      	it	cc
 800245c:	2304      	movcc	r3, #4
 800245e:	e04f      	b.n	8002500 <HAL_I2C_Init+0x1c4>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d111      	bne.n	800248c <HAL_I2C_Init+0x150>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	1e58      	subs	r0, r3, #1
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6859      	ldr	r1, [r3, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	440b      	add	r3, r1
 8002476:	fbb0 f3f3 	udiv	r3, r0, r3
 800247a:	3301      	adds	r3, #1
 800247c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002480:	2b00      	cmp	r3, #0
 8002482:	bf0c      	ite	eq
 8002484:	2301      	moveq	r3, #1
 8002486:	2300      	movne	r3, #0
 8002488:	b2db      	uxtb	r3, r3
 800248a:	e012      	b.n	80024b2 <HAL_I2C_Init+0x176>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	1e58      	subs	r0, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6859      	ldr	r1, [r3, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	0099      	lsls	r1, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	fbb0 f3f3 	udiv	r3, r0, r3
 80024a2:	3301      	adds	r3, #1
 80024a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	bf0c      	ite	eq
 80024ac:	2301      	moveq	r3, #1
 80024ae:	2300      	movne	r3, #0
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_I2C_Init+0x17e>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e022      	b.n	8002500 <HAL_I2C_Init+0x1c4>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10e      	bne.n	80024e0 <HAL_I2C_Init+0x1a4>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	1e58      	subs	r0, r3, #1
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6859      	ldr	r1, [r3, #4]
 80024ca:	460b      	mov	r3, r1
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	440b      	add	r3, r1
 80024d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80024d4:	3301      	adds	r3, #1
 80024d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024de:	e00f      	b.n	8002500 <HAL_I2C_Init+0x1c4>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	1e58      	subs	r0, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6859      	ldr	r1, [r3, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	0099      	lsls	r1, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024f6:	3301      	adds	r3, #1
 80024f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	6809      	ldr	r1, [r1, #0]
 8002504:	4313      	orrs	r3, r2
 8002506:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69da      	ldr	r2, [r3, #28]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800252e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6911      	ldr	r1, [r2, #16]
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	68d2      	ldr	r2, [r2, #12]
 800253a:	4311      	orrs	r1, r2
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	430b      	orrs	r3, r1
 8002542:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695a      	ldr	r2, [r3, #20]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0201 	orr.w	r2, r2, #1
 800256e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2220      	movs	r2, #32
 800257a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	000186a0 	.word	0x000186a0
 800259c:	001e847f 	.word	0x001e847f
 80025a0:	003d08ff 	.word	0x003d08ff
 80025a4:	431bde83 	.word	0x431bde83
 80025a8:	10624dd3 	.word	0x10624dd3

080025ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e25b      	b.n	8002a76 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d075      	beq.n	80026b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ca:	4ba3      	ldr	r3, [pc, #652]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d00c      	beq.n	80025f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025d6:	4ba0      	ldr	r3, [pc, #640]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d112      	bne.n	8002608 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025e2:	4b9d      	ldr	r3, [pc, #628]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ee:	d10b      	bne.n	8002608 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f0:	4b99      	ldr	r3, [pc, #612]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d05b      	beq.n	80026b4 <HAL_RCC_OscConfig+0x108>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d157      	bne.n	80026b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e236      	b.n	8002a76 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002610:	d106      	bne.n	8002620 <HAL_RCC_OscConfig+0x74>
 8002612:	4b91      	ldr	r3, [pc, #580]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a90      	ldr	r2, [pc, #576]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 8002618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	e01d      	b.n	800265c <HAL_RCC_OscConfig+0xb0>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002628:	d10c      	bne.n	8002644 <HAL_RCC_OscConfig+0x98>
 800262a:	4b8b      	ldr	r3, [pc, #556]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a8a      	ldr	r2, [pc, #552]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 8002630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	4b88      	ldr	r3, [pc, #544]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a87      	ldr	r2, [pc, #540]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 800263c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	e00b      	b.n	800265c <HAL_RCC_OscConfig+0xb0>
 8002644:	4b84      	ldr	r3, [pc, #528]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a83      	ldr	r2, [pc, #524]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 800264a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800264e:	6013      	str	r3, [r2, #0]
 8002650:	4b81      	ldr	r3, [pc, #516]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a80      	ldr	r2, [pc, #512]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 8002656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800265a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d013      	beq.n	800268c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002664:	f7ff fb6c 	bl	8001d40 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800266c:	f7ff fb68 	bl	8001d40 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b64      	cmp	r3, #100	; 0x64
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e1fb      	b.n	8002a76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267e:	4b76      	ldr	r3, [pc, #472]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0f0      	beq.n	800266c <HAL_RCC_OscConfig+0xc0>
 800268a:	e014      	b.n	80026b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268c:	f7ff fb58 	bl	8001d40 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002694:	f7ff fb54 	bl	8001d40 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b64      	cmp	r3, #100	; 0x64
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e1e7      	b.n	8002a76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026a6:	4b6c      	ldr	r3, [pc, #432]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0xe8>
 80026b2:	e000      	b.n	80026b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d063      	beq.n	800278a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026c2:	4b65      	ldr	r3, [pc, #404]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 030c 	and.w	r3, r3, #12
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00b      	beq.n	80026e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ce:	4b62      	ldr	r3, [pc, #392]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d11c      	bne.n	8002714 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026da:	4b5f      	ldr	r3, [pc, #380]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d116      	bne.n	8002714 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026e6:	4b5c      	ldr	r3, [pc, #368]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d005      	beq.n	80026fe <HAL_RCC_OscConfig+0x152>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d001      	beq.n	80026fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e1bb      	b.n	8002a76 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fe:	4b56      	ldr	r3, [pc, #344]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	4952      	ldr	r1, [pc, #328]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 800270e:	4313      	orrs	r3, r2
 8002710:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002712:	e03a      	b.n	800278a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d020      	beq.n	800275e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800271c:	4b4f      	ldr	r3, [pc, #316]	; (800285c <HAL_RCC_OscConfig+0x2b0>)
 800271e:	2201      	movs	r2, #1
 8002720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002722:	f7ff fb0d 	bl	8001d40 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800272a:	f7ff fb09 	bl	8001d40 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e19c      	b.n	8002a76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800273c:	4b46      	ldr	r3, [pc, #280]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0f0      	beq.n	800272a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002748:	4b43      	ldr	r3, [pc, #268]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	4940      	ldr	r1, [pc, #256]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 8002758:	4313      	orrs	r3, r2
 800275a:	600b      	str	r3, [r1, #0]
 800275c:	e015      	b.n	800278a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800275e:	4b3f      	ldr	r3, [pc, #252]	; (800285c <HAL_RCC_OscConfig+0x2b0>)
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002764:	f7ff faec 	bl	8001d40 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800276c:	f7ff fae8 	bl	8001d40 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e17b      	b.n	8002a76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800277e:	4b36      	ldr	r3, [pc, #216]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d030      	beq.n	80027f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d016      	beq.n	80027cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800279e:	4b30      	ldr	r3, [pc, #192]	; (8002860 <HAL_RCC_OscConfig+0x2b4>)
 80027a0:	2201      	movs	r2, #1
 80027a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a4:	f7ff facc 	bl	8001d40 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ac:	f7ff fac8 	bl	8001d40 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e15b      	b.n	8002a76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027be:	4b26      	ldr	r3, [pc, #152]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 80027c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0f0      	beq.n	80027ac <HAL_RCC_OscConfig+0x200>
 80027ca:	e015      	b.n	80027f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027cc:	4b24      	ldr	r3, [pc, #144]	; (8002860 <HAL_RCC_OscConfig+0x2b4>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d2:	f7ff fab5 	bl	8001d40 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027da:	f7ff fab1 	bl	8001d40 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e144      	b.n	8002a76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ec:	4b1a      	ldr	r3, [pc, #104]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 80027ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1f0      	bne.n	80027da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 80a0 	beq.w	8002946 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002806:	2300      	movs	r3, #0
 8002808:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800280a:	4b13      	ldr	r3, [pc, #76]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10f      	bne.n	8002836 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	4b0f      	ldr	r3, [pc, #60]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	4a0e      	ldr	r2, [pc, #56]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 8002820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002824:	6413      	str	r3, [r2, #64]	; 0x40
 8002826:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002832:	2301      	movs	r3, #1
 8002834:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002836:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <HAL_RCC_OscConfig+0x2b8>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283e:	2b00      	cmp	r3, #0
 8002840:	d121      	bne.n	8002886 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002842:	4b08      	ldr	r3, [pc, #32]	; (8002864 <HAL_RCC_OscConfig+0x2b8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a07      	ldr	r2, [pc, #28]	; (8002864 <HAL_RCC_OscConfig+0x2b8>)
 8002848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800284c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800284e:	f7ff fa77 	bl	8001d40 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002854:	e011      	b.n	800287a <HAL_RCC_OscConfig+0x2ce>
 8002856:	bf00      	nop
 8002858:	40023800 	.word	0x40023800
 800285c:	42470000 	.word	0x42470000
 8002860:	42470e80 	.word	0x42470e80
 8002864:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002868:	f7ff fa6a 	bl	8001d40 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e0fd      	b.n	8002a76 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287a:	4b81      	ldr	r3, [pc, #516]	; (8002a80 <HAL_RCC_OscConfig+0x4d4>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d106      	bne.n	800289c <HAL_RCC_OscConfig+0x2f0>
 800288e:	4b7d      	ldr	r3, [pc, #500]	; (8002a84 <HAL_RCC_OscConfig+0x4d8>)
 8002890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002892:	4a7c      	ldr	r2, [pc, #496]	; (8002a84 <HAL_RCC_OscConfig+0x4d8>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	6713      	str	r3, [r2, #112]	; 0x70
 800289a:	e01c      	b.n	80028d6 <HAL_RCC_OscConfig+0x32a>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2b05      	cmp	r3, #5
 80028a2:	d10c      	bne.n	80028be <HAL_RCC_OscConfig+0x312>
 80028a4:	4b77      	ldr	r3, [pc, #476]	; (8002a84 <HAL_RCC_OscConfig+0x4d8>)
 80028a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a8:	4a76      	ldr	r2, [pc, #472]	; (8002a84 <HAL_RCC_OscConfig+0x4d8>)
 80028aa:	f043 0304 	orr.w	r3, r3, #4
 80028ae:	6713      	str	r3, [r2, #112]	; 0x70
 80028b0:	4b74      	ldr	r3, [pc, #464]	; (8002a84 <HAL_RCC_OscConfig+0x4d8>)
 80028b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b4:	4a73      	ldr	r2, [pc, #460]	; (8002a84 <HAL_RCC_OscConfig+0x4d8>)
 80028b6:	f043 0301 	orr.w	r3, r3, #1
 80028ba:	6713      	str	r3, [r2, #112]	; 0x70
 80028bc:	e00b      	b.n	80028d6 <HAL_RCC_OscConfig+0x32a>
 80028be:	4b71      	ldr	r3, [pc, #452]	; (8002a84 <HAL_RCC_OscConfig+0x4d8>)
 80028c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c2:	4a70      	ldr	r2, [pc, #448]	; (8002a84 <HAL_RCC_OscConfig+0x4d8>)
 80028c4:	f023 0301 	bic.w	r3, r3, #1
 80028c8:	6713      	str	r3, [r2, #112]	; 0x70
 80028ca:	4b6e      	ldr	r3, [pc, #440]	; (8002a84 <HAL_RCC_OscConfig+0x4d8>)
 80028cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ce:	4a6d      	ldr	r2, [pc, #436]	; (8002a84 <HAL_RCC_OscConfig+0x4d8>)
 80028d0:	f023 0304 	bic.w	r3, r3, #4
 80028d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d015      	beq.n	800290a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028de:	f7ff fa2f 	bl	8001d40 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e4:	e00a      	b.n	80028fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028e6:	f7ff fa2b 	bl	8001d40 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e0bc      	b.n	8002a76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fc:	4b61      	ldr	r3, [pc, #388]	; (8002a84 <HAL_RCC_OscConfig+0x4d8>)
 80028fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0ee      	beq.n	80028e6 <HAL_RCC_OscConfig+0x33a>
 8002908:	e014      	b.n	8002934 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800290a:	f7ff fa19 	bl	8001d40 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002910:	e00a      	b.n	8002928 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002912:	f7ff fa15 	bl	8001d40 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002920:	4293      	cmp	r3, r2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e0a6      	b.n	8002a76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002928:	4b56      	ldr	r3, [pc, #344]	; (8002a84 <HAL_RCC_OscConfig+0x4d8>)
 800292a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1ee      	bne.n	8002912 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002934:	7dfb      	ldrb	r3, [r7, #23]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d105      	bne.n	8002946 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800293a:	4b52      	ldr	r3, [pc, #328]	; (8002a84 <HAL_RCC_OscConfig+0x4d8>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	4a51      	ldr	r2, [pc, #324]	; (8002a84 <HAL_RCC_OscConfig+0x4d8>)
 8002940:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002944:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 8092 	beq.w	8002a74 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002950:	4b4c      	ldr	r3, [pc, #304]	; (8002a84 <HAL_RCC_OscConfig+0x4d8>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 030c 	and.w	r3, r3, #12
 8002958:	2b08      	cmp	r3, #8
 800295a:	d05c      	beq.n	8002a16 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	2b02      	cmp	r3, #2
 8002962:	d141      	bne.n	80029e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002964:	4b48      	ldr	r3, [pc, #288]	; (8002a88 <HAL_RCC_OscConfig+0x4dc>)
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296a:	f7ff f9e9 	bl	8001d40 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002972:	f7ff f9e5 	bl	8001d40 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e078      	b.n	8002a76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002984:	4b3f      	ldr	r3, [pc, #252]	; (8002a84 <HAL_RCC_OscConfig+0x4d8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1f0      	bne.n	8002972 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69da      	ldr	r2, [r3, #28]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	431a      	orrs	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	019b      	lsls	r3, r3, #6
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a6:	085b      	lsrs	r3, r3, #1
 80029a8:	3b01      	subs	r3, #1
 80029aa:	041b      	lsls	r3, r3, #16
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b2:	061b      	lsls	r3, r3, #24
 80029b4:	4933      	ldr	r1, [pc, #204]	; (8002a84 <HAL_RCC_OscConfig+0x4d8>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029ba:	4b33      	ldr	r3, [pc, #204]	; (8002a88 <HAL_RCC_OscConfig+0x4dc>)
 80029bc:	2201      	movs	r2, #1
 80029be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7ff f9be 	bl	8001d40 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c8:	f7ff f9ba 	bl	8001d40 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e04d      	b.n	8002a76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029da:	4b2a      	ldr	r3, [pc, #168]	; (8002a84 <HAL_RCC_OscConfig+0x4d8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0x41c>
 80029e6:	e045      	b.n	8002a74 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e8:	4b27      	ldr	r3, [pc, #156]	; (8002a88 <HAL_RCC_OscConfig+0x4dc>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ee:	f7ff f9a7 	bl	8001d40 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f6:	f7ff f9a3 	bl	8001d40 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e036      	b.n	8002a76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a08:	4b1e      	ldr	r3, [pc, #120]	; (8002a84 <HAL_RCC_OscConfig+0x4d8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1f0      	bne.n	80029f6 <HAL_RCC_OscConfig+0x44a>
 8002a14:	e02e      	b.n	8002a74 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e029      	b.n	8002a76 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a22:	4b18      	ldr	r3, [pc, #96]	; (8002a84 <HAL_RCC_OscConfig+0x4d8>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d11c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d115      	bne.n	8002a70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d10d      	bne.n	8002a70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d106      	bne.n	8002a70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d001      	beq.n	8002a74 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e000      	b.n	8002a76 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40007000 	.word	0x40007000
 8002a84:	40023800 	.word	0x40023800
 8002a88:	42470060 	.word	0x42470060

08002a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0cc      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa0:	4b68      	ldr	r3, [pc, #416]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d90c      	bls.n	8002ac8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aae:	4b65      	ldr	r3, [pc, #404]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab6:	4b63      	ldr	r3, [pc, #396]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0b8      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d020      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d005      	beq.n	8002aec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae0:	4b59      	ldr	r3, [pc, #356]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	4a58      	ldr	r2, [pc, #352]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002af8:	4b53      	ldr	r3, [pc, #332]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	4a52      	ldr	r2, [pc, #328]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b04:	4b50      	ldr	r3, [pc, #320]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	494d      	ldr	r1, [pc, #308]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d044      	beq.n	8002bac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d107      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2a:	4b47      	ldr	r3, [pc, #284]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d119      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e07f      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d003      	beq.n	8002b4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d107      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b4a:	4b3f      	ldr	r3, [pc, #252]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d109      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e06f      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5a:	4b3b      	ldr	r3, [pc, #236]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e067      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b6a:	4b37      	ldr	r3, [pc, #220]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f023 0203 	bic.w	r2, r3, #3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	4934      	ldr	r1, [pc, #208]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b7c:	f7ff f8e0 	bl	8001d40 <HAL_GetTick>
 8002b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b82:	e00a      	b.n	8002b9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b84:	f7ff f8dc 	bl	8001d40 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e04f      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9a:	4b2b      	ldr	r3, [pc, #172]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 020c 	and.w	r2, r3, #12
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d1eb      	bne.n	8002b84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bac:	4b25      	ldr	r3, [pc, #148]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 030f 	and.w	r3, r3, #15
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d20c      	bcs.n	8002bd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bba:	4b22      	ldr	r3, [pc, #136]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc2:	4b20      	ldr	r3, [pc, #128]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e032      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be0:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4916      	ldr	r1, [pc, #88]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d009      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bfe:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	490e      	ldr	r1, [pc, #56]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c12:	f000 f821 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002c16:	4601      	mov	r1, r0
 8002c18:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	4a0a      	ldr	r2, [pc, #40]	; (8002c4c <HAL_RCC_ClockConfig+0x1c0>)
 8002c24:	5cd3      	ldrb	r3, [r2, r3]
 8002c26:	fa21 f303 	lsr.w	r3, r1, r3
 8002c2a:	4a09      	ldr	r2, [pc, #36]	; (8002c50 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c2e:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <HAL_RCC_ClockConfig+0x1c8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff f840 	bl	8001cb8 <HAL_InitTick>

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40023c00 	.word	0x40023c00
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	08005878 	.word	0x08005878
 8002c50:	20000004 	.word	0x20000004
 8002c54:	20000008 	.word	0x20000008

08002c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	607b      	str	r3, [r7, #4]
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	2300      	movs	r3, #0
 8002c68:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c6e:	4b63      	ldr	r3, [pc, #396]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 030c 	and.w	r3, r3, #12
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d007      	beq.n	8002c8a <HAL_RCC_GetSysClockFreq+0x32>
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d008      	beq.n	8002c90 <HAL_RCC_GetSysClockFreq+0x38>
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f040 80b4 	bne.w	8002dec <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c84:	4b5e      	ldr	r3, [pc, #376]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c86:	60bb      	str	r3, [r7, #8]
       break;
 8002c88:	e0b3      	b.n	8002df2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c8a:	4b5e      	ldr	r3, [pc, #376]	; (8002e04 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002c8c:	60bb      	str	r3, [r7, #8]
      break;
 8002c8e:	e0b0      	b.n	8002df2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c90:	4b5a      	ldr	r3, [pc, #360]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c98:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c9a:	4b58      	ldr	r3, [pc, #352]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d04a      	beq.n	8002d3c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ca6:	4b55      	ldr	r3, [pc, #340]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	099b      	lsrs	r3, r3, #6
 8002cac:	f04f 0400 	mov.w	r4, #0
 8002cb0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	ea03 0501 	and.w	r5, r3, r1
 8002cbc:	ea04 0602 	and.w	r6, r4, r2
 8002cc0:	4629      	mov	r1, r5
 8002cc2:	4632      	mov	r2, r6
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	f04f 0400 	mov.w	r4, #0
 8002ccc:	0154      	lsls	r4, r2, #5
 8002cce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002cd2:	014b      	lsls	r3, r1, #5
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4622      	mov	r2, r4
 8002cd8:	1b49      	subs	r1, r1, r5
 8002cda:	eb62 0206 	sbc.w	r2, r2, r6
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	f04f 0400 	mov.w	r4, #0
 8002ce6:	0194      	lsls	r4, r2, #6
 8002ce8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002cec:	018b      	lsls	r3, r1, #6
 8002cee:	1a5b      	subs	r3, r3, r1
 8002cf0:	eb64 0402 	sbc.w	r4, r4, r2
 8002cf4:	f04f 0100 	mov.w	r1, #0
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	00e2      	lsls	r2, r4, #3
 8002cfe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d02:	00d9      	lsls	r1, r3, #3
 8002d04:	460b      	mov	r3, r1
 8002d06:	4614      	mov	r4, r2
 8002d08:	195b      	adds	r3, r3, r5
 8002d0a:	eb44 0406 	adc.w	r4, r4, r6
 8002d0e:	f04f 0100 	mov.w	r1, #0
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	0262      	lsls	r2, r4, #9
 8002d18:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002d1c:	0259      	lsls	r1, r3, #9
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4614      	mov	r4, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	4621      	mov	r1, r4
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f04f 0400 	mov.w	r4, #0
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4623      	mov	r3, r4
 8002d30:	f7fd feac 	bl	8000a8c <__aeabi_uldivmod>
 8002d34:	4603      	mov	r3, r0
 8002d36:	460c      	mov	r4, r1
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	e049      	b.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d3c:	4b2f      	ldr	r3, [pc, #188]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	099b      	lsrs	r3, r3, #6
 8002d42:	f04f 0400 	mov.w	r4, #0
 8002d46:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	ea03 0501 	and.w	r5, r3, r1
 8002d52:	ea04 0602 	and.w	r6, r4, r2
 8002d56:	4629      	mov	r1, r5
 8002d58:	4632      	mov	r2, r6
 8002d5a:	f04f 0300 	mov.w	r3, #0
 8002d5e:	f04f 0400 	mov.w	r4, #0
 8002d62:	0154      	lsls	r4, r2, #5
 8002d64:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d68:	014b      	lsls	r3, r1, #5
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4622      	mov	r2, r4
 8002d6e:	1b49      	subs	r1, r1, r5
 8002d70:	eb62 0206 	sbc.w	r2, r2, r6
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	f04f 0400 	mov.w	r4, #0
 8002d7c:	0194      	lsls	r4, r2, #6
 8002d7e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d82:	018b      	lsls	r3, r1, #6
 8002d84:	1a5b      	subs	r3, r3, r1
 8002d86:	eb64 0402 	sbc.w	r4, r4, r2
 8002d8a:	f04f 0100 	mov.w	r1, #0
 8002d8e:	f04f 0200 	mov.w	r2, #0
 8002d92:	00e2      	lsls	r2, r4, #3
 8002d94:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d98:	00d9      	lsls	r1, r3, #3
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4614      	mov	r4, r2
 8002d9e:	195b      	adds	r3, r3, r5
 8002da0:	eb44 0406 	adc.w	r4, r4, r6
 8002da4:	f04f 0100 	mov.w	r1, #0
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	02a2      	lsls	r2, r4, #10
 8002dae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002db2:	0299      	lsls	r1, r3, #10
 8002db4:	460b      	mov	r3, r1
 8002db6:	4614      	mov	r4, r2
 8002db8:	4618      	mov	r0, r3
 8002dba:	4621      	mov	r1, r4
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f04f 0400 	mov.w	r4, #0
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	4623      	mov	r3, r4
 8002dc6:	f7fd fe61 	bl	8000a8c <__aeabi_uldivmod>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	460c      	mov	r4, r1
 8002dce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dd0:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	0c1b      	lsrs	r3, r3, #16
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	3301      	adds	r3, #1
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de8:	60bb      	str	r3, [r7, #8]
      break;
 8002dea:	e002      	b.n	8002df2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dec:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002dee:	60bb      	str	r3, [r7, #8]
      break;
 8002df0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002df2:	68bb      	ldr	r3, [r7, #8]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	00f42400 	.word	0x00f42400
 8002e04:	007a1200 	.word	0x007a1200

08002e08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e0c:	4b03      	ldr	r3, [pc, #12]	; (8002e1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	20000004 	.word	0x20000004

08002e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e24:	f7ff fff0 	bl	8002e08 <HAL_RCC_GetHCLKFreq>
 8002e28:	4601      	mov	r1, r0
 8002e2a:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	0a9b      	lsrs	r3, r3, #10
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	4a03      	ldr	r2, [pc, #12]	; (8002e44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e36:	5cd3      	ldrb	r3, [r2, r3]
 8002e38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40023800 	.word	0x40023800
 8002e44:	08005888 	.word	0x08005888

08002e48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e4c:	f7ff ffdc 	bl	8002e08 <HAL_RCC_GetHCLKFreq>
 8002e50:	4601      	mov	r1, r0
 8002e52:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	0b5b      	lsrs	r3, r3, #13
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	4a03      	ldr	r2, [pc, #12]	; (8002e6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e5e:	5cd3      	ldrb	r3, [r2, r3]
 8002e60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	08005888 	.word	0x08005888

08002e70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e01d      	b.n	8002ebe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d106      	bne.n	8002e9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7fe fd34 	bl	8001904 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3304      	adds	r3, #4
 8002eac:	4619      	mov	r1, r3
 8002eae:	4610      	mov	r0, r2
 8002eb0:	f000 fc92 	bl	80037d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e01d      	b.n	8002f14 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d106      	bne.n	8002ef2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f815 	bl	8002f1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3304      	adds	r3, #4
 8002f02:	4619      	mov	r1, r3
 8002f04:	4610      	mov	r0, r2
 8002f06:	f000 fc67 	bl	80037d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	6839      	ldr	r1, [r7, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f001 f80c 	bl	8003f60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a10      	ldr	r2, [pc, #64]	; (8002f90 <HAL_TIM_PWM_Start+0x60>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d107      	bne.n	8002f62 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2b06      	cmp	r3, #6
 8002f72:	d007      	beq.n	8002f84 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40010000 	.word	0x40010000

08002f94 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e01d      	b.n	8002fe2 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d106      	bne.n	8002fc0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7fe fc52 	bl	8001864 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3304      	adds	r3, #4
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	f000 fc00 	bl	80037d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
	...

08002fec <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b0c      	cmp	r3, #12
 8002ffa:	d841      	bhi.n	8003080 <HAL_TIM_IC_Start_IT+0x94>
 8002ffc:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <HAL_TIM_IC_Start_IT+0x18>)
 8002ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003002:	bf00      	nop
 8003004:	08003039 	.word	0x08003039
 8003008:	08003081 	.word	0x08003081
 800300c:	08003081 	.word	0x08003081
 8003010:	08003081 	.word	0x08003081
 8003014:	0800304b 	.word	0x0800304b
 8003018:	08003081 	.word	0x08003081
 800301c:	08003081 	.word	0x08003081
 8003020:	08003081 	.word	0x08003081
 8003024:	0800305d 	.word	0x0800305d
 8003028:	08003081 	.word	0x08003081
 800302c:	08003081 	.word	0x08003081
 8003030:	08003081 	.word	0x08003081
 8003034:	0800306f 	.word	0x0800306f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0202 	orr.w	r2, r2, #2
 8003046:	60da      	str	r2, [r3, #12]
      break;
 8003048:	e01b      	b.n	8003082 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f042 0204 	orr.w	r2, r2, #4
 8003058:	60da      	str	r2, [r3, #12]
      break;
 800305a:	e012      	b.n	8003082 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0208 	orr.w	r2, r2, #8
 800306a:	60da      	str	r2, [r3, #12]
      break;
 800306c:	e009      	b.n	8003082 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f042 0210 	orr.w	r2, r2, #16
 800307c:	60da      	str	r2, [r3, #12]
      break;
 800307e:	e000      	b.n	8003082 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8003080:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2201      	movs	r2, #1
 8003088:	6839      	ldr	r1, [r7, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f000 ff68 	bl	8003f60 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2b06      	cmp	r3, #6
 80030a0:	d007      	beq.n	80030b2 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 0201 	orr.w	r2, r2, #1
 80030b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d122      	bne.n	8003118 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d11b      	bne.n	8003118 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 0202 	mvn.w	r2, #2
 80030e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7fe f9ae 	bl	8001460 <HAL_TIM_IC_CaptureCallback>
 8003104:	e005      	b.n	8003112 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fb48 	bl	800379c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 fb4f 	bl	80037b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	2b04      	cmp	r3, #4
 8003124:	d122      	bne.n	800316c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b04      	cmp	r3, #4
 8003132:	d11b      	bne.n	800316c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f06f 0204 	mvn.w	r2, #4
 800313c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2202      	movs	r2, #2
 8003142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fe f984 	bl	8001460 <HAL_TIM_IC_CaptureCallback>
 8003158:	e005      	b.n	8003166 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 fb1e 	bl	800379c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 fb25 	bl	80037b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b08      	cmp	r3, #8
 8003178:	d122      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b08      	cmp	r3, #8
 8003186:	d11b      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0208 	mvn.w	r2, #8
 8003190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2204      	movs	r2, #4
 8003196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7fe f95a 	bl	8001460 <HAL_TIM_IC_CaptureCallback>
 80031ac:	e005      	b.n	80031ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 faf4 	bl	800379c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 fafb 	bl	80037b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f003 0310 	and.w	r3, r3, #16
 80031ca:	2b10      	cmp	r3, #16
 80031cc:	d122      	bne.n	8003214 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f003 0310 	and.w	r3, r3, #16
 80031d8:	2b10      	cmp	r3, #16
 80031da:	d11b      	bne.n	8003214 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f06f 0210 	mvn.w	r2, #16
 80031e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2208      	movs	r2, #8
 80031ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7fe f930 	bl	8001460 <HAL_TIM_IC_CaptureCallback>
 8003200:	e005      	b.n	800320e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 faca 	bl	800379c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 fad1 	bl	80037b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b01      	cmp	r3, #1
 8003220:	d10e      	bne.n	8003240 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b01      	cmp	r3, #1
 800322e:	d107      	bne.n	8003240 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f06f 0201 	mvn.w	r2, #1
 8003238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 faa4 	bl	8003788 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324a:	2b80      	cmp	r3, #128	; 0x80
 800324c:	d10e      	bne.n	800326c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003258:	2b80      	cmp	r3, #128	; 0x80
 800325a:	d107      	bne.n	800326c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 ff18 	bl	800409c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003276:	2b40      	cmp	r3, #64	; 0x40
 8003278:	d10e      	bne.n	8003298 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003284:	2b40      	cmp	r3, #64	; 0x40
 8003286:	d107      	bne.n	8003298 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 fa96 	bl	80037c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	2b20      	cmp	r3, #32
 80032a4:	d10e      	bne.n	80032c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f003 0320 	and.w	r3, r3, #32
 80032b0:	2b20      	cmp	r3, #32
 80032b2:	d107      	bne.n	80032c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0220 	mvn.w	r2, #32
 80032bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fee2 	bl	8004088 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032c4:	bf00      	nop
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d101      	bne.n	80032e6 <HAL_TIM_IC_ConfigChannel+0x1a>
 80032e2:	2302      	movs	r3, #2
 80032e4:	e08a      	b.n	80033fc <HAL_TIM_IC_ConfigChannel+0x130>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2202      	movs	r2, #2
 80032f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d11b      	bne.n	8003334 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6818      	ldr	r0, [r3, #0]
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	6819      	ldr	r1, [r3, #0]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	f000 fc70 	bl	8003bf0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699a      	ldr	r2, [r3, #24]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 020c 	bic.w	r2, r2, #12
 800331e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6999      	ldr	r1, [r3, #24]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	619a      	str	r2, [r3, #24]
 8003332:	e05a      	b.n	80033ea <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b04      	cmp	r3, #4
 8003338:	d11c      	bne.n	8003374 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6818      	ldr	r0, [r3, #0]
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	6819      	ldr	r1, [r3, #0]
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f000 fce8 	bl	8003d1e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	699a      	ldr	r2, [r3, #24]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800335c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6999      	ldr	r1, [r3, #24]
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	021a      	lsls	r2, r3, #8
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	619a      	str	r2, [r3, #24]
 8003372:	e03a      	b.n	80033ea <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b08      	cmp	r3, #8
 8003378:	d11b      	bne.n	80033b2 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	6819      	ldr	r1, [r3, #0]
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f000 fd35 	bl	8003df8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69da      	ldr	r2, [r3, #28]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 020c 	bic.w	r2, r2, #12
 800339c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	69d9      	ldr	r1, [r3, #28]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	61da      	str	r2, [r3, #28]
 80033b0:	e01b      	b.n	80033ea <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6818      	ldr	r0, [r3, #0]
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	6819      	ldr	r1, [r3, #0]
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f000 fd55 	bl	8003e70 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69da      	ldr	r2, [r3, #28]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80033d4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	69d9      	ldr	r1, [r3, #28]
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	021a      	lsls	r2, r3, #8
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003416:	2b01      	cmp	r3, #1
 8003418:	d101      	bne.n	800341e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800341a:	2302      	movs	r3, #2
 800341c:	e0b4      	b.n	8003588 <HAL_TIM_PWM_ConfigChannel+0x184>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2202      	movs	r2, #2
 800342a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b0c      	cmp	r3, #12
 8003432:	f200 809f 	bhi.w	8003574 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003436:	a201      	add	r2, pc, #4	; (adr r2, 800343c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343c:	08003471 	.word	0x08003471
 8003440:	08003575 	.word	0x08003575
 8003444:	08003575 	.word	0x08003575
 8003448:	08003575 	.word	0x08003575
 800344c:	080034b1 	.word	0x080034b1
 8003450:	08003575 	.word	0x08003575
 8003454:	08003575 	.word	0x08003575
 8003458:	08003575 	.word	0x08003575
 800345c:	080034f3 	.word	0x080034f3
 8003460:	08003575 	.word	0x08003575
 8003464:	08003575 	.word	0x08003575
 8003468:	08003575 	.word	0x08003575
 800346c:	08003533 	.word	0x08003533
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68b9      	ldr	r1, [r7, #8]
 8003476:	4618      	mov	r0, r3
 8003478:	f000 fa2e 	bl	80038d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	699a      	ldr	r2, [r3, #24]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0208 	orr.w	r2, r2, #8
 800348a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699a      	ldr	r2, [r3, #24]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0204 	bic.w	r2, r2, #4
 800349a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6999      	ldr	r1, [r3, #24]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	691a      	ldr	r2, [r3, #16]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	619a      	str	r2, [r3, #24]
      break;
 80034ae:	e062      	b.n	8003576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68b9      	ldr	r1, [r7, #8]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 fa74 	bl	80039a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699a      	ldr	r2, [r3, #24]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	699a      	ldr	r2, [r3, #24]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6999      	ldr	r1, [r3, #24]
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	021a      	lsls	r2, r3, #8
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	619a      	str	r2, [r3, #24]
      break;
 80034f0:	e041      	b.n	8003576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68b9      	ldr	r1, [r7, #8]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 fabf 	bl	8003a7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	69da      	ldr	r2, [r3, #28]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f042 0208 	orr.w	r2, r2, #8
 800350c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	69da      	ldr	r2, [r3, #28]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0204 	bic.w	r2, r2, #4
 800351c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	69d9      	ldr	r1, [r3, #28]
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	61da      	str	r2, [r3, #28]
      break;
 8003530:	e021      	b.n	8003576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68b9      	ldr	r1, [r7, #8]
 8003538:	4618      	mov	r0, r3
 800353a:	f000 fb09 	bl	8003b50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	69da      	ldr	r2, [r3, #28]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800354c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	69da      	ldr	r2, [r3, #28]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800355c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	69d9      	ldr	r1, [r3, #28]
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	021a      	lsls	r2, r3, #8
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	61da      	str	r2, [r3, #28]
      break;
 8003572:	e000      	b.n	8003576 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003574:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_TIM_ConfigClockSource+0x18>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e0a6      	b.n	80036f6 <HAL_TIM_ConfigClockSource+0x166>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b40      	cmp	r3, #64	; 0x40
 80035de:	d067      	beq.n	80036b0 <HAL_TIM_ConfigClockSource+0x120>
 80035e0:	2b40      	cmp	r3, #64	; 0x40
 80035e2:	d80b      	bhi.n	80035fc <HAL_TIM_ConfigClockSource+0x6c>
 80035e4:	2b10      	cmp	r3, #16
 80035e6:	d073      	beq.n	80036d0 <HAL_TIM_ConfigClockSource+0x140>
 80035e8:	2b10      	cmp	r3, #16
 80035ea:	d802      	bhi.n	80035f2 <HAL_TIM_ConfigClockSource+0x62>
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d06f      	beq.n	80036d0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80035f0:	e078      	b.n	80036e4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035f2:	2b20      	cmp	r3, #32
 80035f4:	d06c      	beq.n	80036d0 <HAL_TIM_ConfigClockSource+0x140>
 80035f6:	2b30      	cmp	r3, #48	; 0x30
 80035f8:	d06a      	beq.n	80036d0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80035fa:	e073      	b.n	80036e4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035fc:	2b70      	cmp	r3, #112	; 0x70
 80035fe:	d00d      	beq.n	800361c <HAL_TIM_ConfigClockSource+0x8c>
 8003600:	2b70      	cmp	r3, #112	; 0x70
 8003602:	d804      	bhi.n	800360e <HAL_TIM_ConfigClockSource+0x7e>
 8003604:	2b50      	cmp	r3, #80	; 0x50
 8003606:	d033      	beq.n	8003670 <HAL_TIM_ConfigClockSource+0xe0>
 8003608:	2b60      	cmp	r3, #96	; 0x60
 800360a:	d041      	beq.n	8003690 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800360c:	e06a      	b.n	80036e4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800360e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003612:	d066      	beq.n	80036e2 <HAL_TIM_ConfigClockSource+0x152>
 8003614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003618:	d017      	beq.n	800364a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800361a:	e063      	b.n	80036e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6818      	ldr	r0, [r3, #0]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	6899      	ldr	r1, [r3, #8]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f000 fc78 	bl	8003f20 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800363e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	609a      	str	r2, [r3, #8]
      break;
 8003648:	e04c      	b.n	80036e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6818      	ldr	r0, [r3, #0]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	6899      	ldr	r1, [r3, #8]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f000 fc61 	bl	8003f20 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800366c:	609a      	str	r2, [r3, #8]
      break;
 800366e:	e039      	b.n	80036e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6818      	ldr	r0, [r3, #0]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	6859      	ldr	r1, [r3, #4]
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	461a      	mov	r2, r3
 800367e:	f000 fb1f 	bl	8003cc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2150      	movs	r1, #80	; 0x50
 8003688:	4618      	mov	r0, r3
 800368a:	f000 fc2e 	bl	8003eea <TIM_ITRx_SetConfig>
      break;
 800368e:	e029      	b.n	80036e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	6859      	ldr	r1, [r3, #4]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	461a      	mov	r2, r3
 800369e:	f000 fb7b 	bl	8003d98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2160      	movs	r1, #96	; 0x60
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 fc1e 	bl	8003eea <TIM_ITRx_SetConfig>
      break;
 80036ae:	e019      	b.n	80036e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6818      	ldr	r0, [r3, #0]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	6859      	ldr	r1, [r3, #4]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	461a      	mov	r2, r3
 80036be:	f000 faff 	bl	8003cc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2140      	movs	r1, #64	; 0x40
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 fc0e 	bl	8003eea <TIM_ITRx_SetConfig>
      break;
 80036ce:	e009      	b.n	80036e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4619      	mov	r1, r3
 80036da:	4610      	mov	r0, r2
 80036dc:	f000 fc05 	bl	8003eea <TIM_ITRx_SetConfig>
      break;
 80036e0:	e000      	b.n	80036e4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80036e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	2b0c      	cmp	r3, #12
 8003712:	d831      	bhi.n	8003778 <HAL_TIM_ReadCapturedValue+0x78>
 8003714:	a201      	add	r2, pc, #4	; (adr r2, 800371c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371a:	bf00      	nop
 800371c:	08003751 	.word	0x08003751
 8003720:	08003779 	.word	0x08003779
 8003724:	08003779 	.word	0x08003779
 8003728:	08003779 	.word	0x08003779
 800372c:	0800375b 	.word	0x0800375b
 8003730:	08003779 	.word	0x08003779
 8003734:	08003779 	.word	0x08003779
 8003738:	08003779 	.word	0x08003779
 800373c:	08003765 	.word	0x08003765
 8003740:	08003779 	.word	0x08003779
 8003744:	08003779 	.word	0x08003779
 8003748:	08003779 	.word	0x08003779
 800374c:	0800376f 	.word	0x0800376f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003756:	60fb      	str	r3, [r7, #12]

      break;
 8003758:	e00f      	b.n	800377a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003760:	60fb      	str	r3, [r7, #12]

      break;
 8003762:	e00a      	b.n	800377a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376a:	60fb      	str	r3, [r7, #12]

      break;
 800376c:	e005      	b.n	800377a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	60fb      	str	r3, [r7, #12]

      break;
 8003776:	e000      	b.n	800377a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003778:	bf00      	nop
  }

  return tmpreg;
 800377a:	68fb      	ldr	r3, [r7, #12]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a34      	ldr	r2, [pc, #208]	; (80038bc <TIM_Base_SetConfig+0xe4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d00f      	beq.n	8003810 <TIM_Base_SetConfig+0x38>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f6:	d00b      	beq.n	8003810 <TIM_Base_SetConfig+0x38>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a31      	ldr	r2, [pc, #196]	; (80038c0 <TIM_Base_SetConfig+0xe8>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d007      	beq.n	8003810 <TIM_Base_SetConfig+0x38>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a30      	ldr	r2, [pc, #192]	; (80038c4 <TIM_Base_SetConfig+0xec>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d003      	beq.n	8003810 <TIM_Base_SetConfig+0x38>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a2f      	ldr	r2, [pc, #188]	; (80038c8 <TIM_Base_SetConfig+0xf0>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d108      	bne.n	8003822 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003816:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a25      	ldr	r2, [pc, #148]	; (80038bc <TIM_Base_SetConfig+0xe4>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d01b      	beq.n	8003862 <TIM_Base_SetConfig+0x8a>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003830:	d017      	beq.n	8003862 <TIM_Base_SetConfig+0x8a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a22      	ldr	r2, [pc, #136]	; (80038c0 <TIM_Base_SetConfig+0xe8>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d013      	beq.n	8003862 <TIM_Base_SetConfig+0x8a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a21      	ldr	r2, [pc, #132]	; (80038c4 <TIM_Base_SetConfig+0xec>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d00f      	beq.n	8003862 <TIM_Base_SetConfig+0x8a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a20      	ldr	r2, [pc, #128]	; (80038c8 <TIM_Base_SetConfig+0xf0>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d00b      	beq.n	8003862 <TIM_Base_SetConfig+0x8a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a1f      	ldr	r2, [pc, #124]	; (80038cc <TIM_Base_SetConfig+0xf4>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d007      	beq.n	8003862 <TIM_Base_SetConfig+0x8a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a1e      	ldr	r2, [pc, #120]	; (80038d0 <TIM_Base_SetConfig+0xf8>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d003      	beq.n	8003862 <TIM_Base_SetConfig+0x8a>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a1d      	ldr	r2, [pc, #116]	; (80038d4 <TIM_Base_SetConfig+0xfc>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d108      	bne.n	8003874 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	4313      	orrs	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a08      	ldr	r2, [pc, #32]	; (80038bc <TIM_Base_SetConfig+0xe4>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d103      	bne.n	80038a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	691a      	ldr	r2, [r3, #16]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	615a      	str	r2, [r3, #20]
}
 80038ae:	bf00      	nop
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	40010000 	.word	0x40010000
 80038c0:	40000400 	.word	0x40000400
 80038c4:	40000800 	.word	0x40000800
 80038c8:	40000c00 	.word	0x40000c00
 80038cc:	40014000 	.word	0x40014000
 80038d0:	40014400 	.word	0x40014400
 80038d4:	40014800 	.word	0x40014800

080038d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038d8:	b480      	push	{r7}
 80038da:	b087      	sub	sp, #28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	f023 0201 	bic.w	r2, r3, #1
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0303 	bic.w	r3, r3, #3
 800390e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f023 0302 	bic.w	r3, r3, #2
 8003920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	4313      	orrs	r3, r2
 800392a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a1c      	ldr	r2, [pc, #112]	; (80039a0 <TIM_OC1_SetConfig+0xc8>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d10c      	bne.n	800394e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f023 0308 	bic.w	r3, r3, #8
 800393a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	4313      	orrs	r3, r2
 8003944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f023 0304 	bic.w	r3, r3, #4
 800394c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a13      	ldr	r2, [pc, #76]	; (80039a0 <TIM_OC1_SetConfig+0xc8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d111      	bne.n	800397a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800395c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003964:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4313      	orrs	r3, r2
 8003978:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	621a      	str	r2, [r3, #32]
}
 8003994:	bf00      	nop
 8003996:	371c      	adds	r7, #28
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	40010000 	.word	0x40010000

080039a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	f023 0210 	bic.w	r2, r3, #16
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	021b      	lsls	r3, r3, #8
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f023 0320 	bic.w	r3, r3, #32
 80039ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a1e      	ldr	r2, [pc, #120]	; (8003a78 <TIM_OC2_SetConfig+0xd4>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d10d      	bne.n	8003a20 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a15      	ldr	r2, [pc, #84]	; (8003a78 <TIM_OC2_SetConfig+0xd4>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d113      	bne.n	8003a50 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	621a      	str	r2, [r3, #32]
}
 8003a6a:	bf00      	nop
 8003a6c:	371c      	adds	r7, #28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	40010000 	.word	0x40010000

08003a7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 0303 	bic.w	r3, r3, #3
 8003ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	021b      	lsls	r3, r3, #8
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a1d      	ldr	r2, [pc, #116]	; (8003b4c <TIM_OC3_SetConfig+0xd0>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d10d      	bne.n	8003af6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ae0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	021b      	lsls	r3, r3, #8
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003af4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a14      	ldr	r2, [pc, #80]	; (8003b4c <TIM_OC3_SetConfig+0xd0>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d113      	bne.n	8003b26 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	621a      	str	r2, [r3, #32]
}
 8003b40:	bf00      	nop
 8003b42:	371c      	adds	r7, #28
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	40010000 	.word	0x40010000

08003b50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b087      	sub	sp, #28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	021b      	lsls	r3, r3, #8
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	031b      	lsls	r3, r3, #12
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a10      	ldr	r2, [pc, #64]	; (8003bec <TIM_OC4_SetConfig+0x9c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d109      	bne.n	8003bc4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	019b      	lsls	r3, r3, #6
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	621a      	str	r2, [r3, #32]
}
 8003bde:	bf00      	nop
 8003be0:	371c      	adds	r7, #28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	40010000 	.word	0x40010000

08003bf0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	f023 0201 	bic.w	r2, r3, #1
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4a24      	ldr	r2, [pc, #144]	; (8003cac <TIM_TI1_SetConfig+0xbc>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d013      	beq.n	8003c46 <TIM_TI1_SetConfig+0x56>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c24:	d00f      	beq.n	8003c46 <TIM_TI1_SetConfig+0x56>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	4a21      	ldr	r2, [pc, #132]	; (8003cb0 <TIM_TI1_SetConfig+0xc0>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00b      	beq.n	8003c46 <TIM_TI1_SetConfig+0x56>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4a20      	ldr	r2, [pc, #128]	; (8003cb4 <TIM_TI1_SetConfig+0xc4>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d007      	beq.n	8003c46 <TIM_TI1_SetConfig+0x56>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4a1f      	ldr	r2, [pc, #124]	; (8003cb8 <TIM_TI1_SetConfig+0xc8>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d003      	beq.n	8003c46 <TIM_TI1_SetConfig+0x56>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	4a1e      	ldr	r2, [pc, #120]	; (8003cbc <TIM_TI1_SetConfig+0xcc>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d101      	bne.n	8003c4a <TIM_TI1_SetConfig+0x5a>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <TIM_TI1_SetConfig+0x5c>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d008      	beq.n	8003c62 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f023 0303 	bic.w	r3, r3, #3
 8003c56:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	e003      	b.n	8003c6a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f043 0301 	orr.w	r3, r3, #1
 8003c68:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f023 030a 	bic.w	r3, r3, #10
 8003c84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	f003 030a 	and.w	r3, r3, #10
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	621a      	str	r2, [r3, #32]
}
 8003c9e:	bf00      	nop
 8003ca0:	371c      	adds	r7, #28
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40010000 	.word	0x40010000
 8003cb0:	40000400 	.word	0x40000400
 8003cb4:	40000800 	.word	0x40000800
 8003cb8:	40000c00 	.word	0x40000c00
 8003cbc:	40014000 	.word	0x40014000

08003cc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	f023 0201 	bic.w	r2, r3, #1
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	011b      	lsls	r3, r3, #4
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f023 030a 	bic.w	r3, r3, #10
 8003cfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	621a      	str	r2, [r3, #32]
}
 8003d12:	bf00      	nop
 8003d14:	371c      	adds	r7, #28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b087      	sub	sp, #28
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	60f8      	str	r0, [r7, #12]
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	607a      	str	r2, [r7, #4]
 8003d2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	f023 0210 	bic.w	r2, r3, #16
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d4a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	021b      	lsls	r3, r3, #8
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	031b      	lsls	r3, r3, #12
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d70:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	621a      	str	r2, [r3, #32]
}
 8003d8c:	bf00      	nop
 8003d8e:	371c      	adds	r7, #28
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	f023 0210 	bic.w	r2, r3, #16
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	031b      	lsls	r3, r3, #12
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003dd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	011b      	lsls	r3, r3, #4
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	621a      	str	r2, [r3, #32]
}
 8003dec:	bf00      	nop
 8003dee:	371c      	adds	r7, #28
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b087      	sub	sp, #28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
 8003e04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f023 0303 	bic.w	r3, r3, #3
 8003e24:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e34:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003e48:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	021b      	lsls	r3, r3, #8
 8003e4e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	621a      	str	r2, [r3, #32]
}
 8003e64:	bf00      	nop
 8003e66:	371c      	adds	r7, #28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
 8003e7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	021b      	lsls	r3, r3, #8
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003eae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	031b      	lsls	r3, r3, #12
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003ec2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	031b      	lsls	r3, r3, #12
 8003ec8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	621a      	str	r2, [r3, #32]
}
 8003ede:	bf00      	nop
 8003ee0:	371c      	adds	r7, #28
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b085      	sub	sp, #20
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
 8003ef2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f043 0307 	orr.w	r3, r3, #7
 8003f0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	609a      	str	r2, [r3, #8]
}
 8003f14:	bf00      	nop
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	021a      	lsls	r2, r3, #8
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	431a      	orrs	r2, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	609a      	str	r2, [r3, #8]
}
 8003f54:	bf00      	nop
 8003f56:	371c      	adds	r7, #28
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f003 031f 	and.w	r3, r3, #31
 8003f72:	2201      	movs	r2, #1
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a1a      	ldr	r2, [r3, #32]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	43db      	mvns	r3, r3
 8003f82:	401a      	ands	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a1a      	ldr	r2, [r3, #32]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f003 031f 	and.w	r3, r3, #31
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	fa01 f303 	lsl.w	r3, r1, r3
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	621a      	str	r2, [r3, #32]
}
 8003f9e:	bf00      	nop
 8003fa0:	371c      	adds	r7, #28
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
	...

08003fac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d101      	bne.n	8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	e050      	b.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a1c      	ldr	r2, [pc, #112]	; (8004074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d018      	beq.n	800403a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004010:	d013      	beq.n	800403a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a18      	ldr	r2, [pc, #96]	; (8004078 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d00e      	beq.n	800403a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a16      	ldr	r2, [pc, #88]	; (800407c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d009      	beq.n	800403a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a15      	ldr	r2, [pc, #84]	; (8004080 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d004      	beq.n	800403a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a13      	ldr	r2, [pc, #76]	; (8004084 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d10c      	bne.n	8004054 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004040:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	4313      	orrs	r3, r2
 800404a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	40010000 	.word	0x40010000
 8004078:	40000400 	.word	0x40000400
 800407c:	40000800 	.word	0x40000800
 8004080:	40000c00 	.word	0x40000c00
 8004084:	40014000 	.word	0x40014000

08004088 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e03f      	b.n	8004142 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d106      	bne.n	80040dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7fd fc76 	bl	80019c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2224      	movs	r2, #36	; 0x24
 80040e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68da      	ldr	r2, [r3, #12]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 fbf1 	bl	80048dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004108:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695a      	ldr	r2, [r3, #20]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004118:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004128:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2220      	movs	r2, #32
 8004134:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b088      	sub	sp, #32
 800414e:	af02      	add	r7, sp, #8
 8004150:	60f8      	str	r0, [r7, #12]
 8004152:	60b9      	str	r1, [r7, #8]
 8004154:	603b      	str	r3, [r7, #0]
 8004156:	4613      	mov	r3, r2
 8004158:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b20      	cmp	r3, #32
 8004168:	f040 8083 	bne.w	8004272 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <HAL_UART_Transmit+0x2e>
 8004172:	88fb      	ldrh	r3, [r7, #6]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e07b      	b.n	8004274 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004182:	2b01      	cmp	r3, #1
 8004184:	d101      	bne.n	800418a <HAL_UART_Transmit+0x40>
 8004186:	2302      	movs	r3, #2
 8004188:	e074      	b.n	8004274 <HAL_UART_Transmit+0x12a>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2221      	movs	r2, #33	; 0x21
 800419c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80041a0:	f7fd fdce 	bl	8001d40 <HAL_GetTick>
 80041a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	88fa      	ldrh	r2, [r7, #6]
 80041aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	88fa      	ldrh	r2, [r7, #6]
 80041b0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80041ba:	e042      	b.n	8004242 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d2:	d122      	bne.n	800421a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2200      	movs	r2, #0
 80041dc:	2180      	movs	r1, #128	; 0x80
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 fa10 	bl	8004604 <UART_WaitOnFlagUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e042      	b.n	8004274 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004200:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d103      	bne.n	8004212 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	3302      	adds	r3, #2
 800420e:	60bb      	str	r3, [r7, #8]
 8004210:	e017      	b.n	8004242 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	3301      	adds	r3, #1
 8004216:	60bb      	str	r3, [r7, #8]
 8004218:	e013      	b.n	8004242 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2200      	movs	r2, #0
 8004222:	2180      	movs	r1, #128	; 0x80
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 f9ed 	bl	8004604 <UART_WaitOnFlagUntilTimeout>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e01f      	b.n	8004274 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	60ba      	str	r2, [r7, #8]
 800423a:	781a      	ldrb	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1b7      	bne.n	80041bc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	2200      	movs	r2, #0
 8004254:	2140      	movs	r1, #64	; 0x40
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 f9d4 	bl	8004604 <UART_WaitOnFlagUntilTimeout>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e006      	b.n	8004274 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2220      	movs	r2, #32
 800426a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800426e:	2300      	movs	r3, #0
 8004270:	e000      	b.n	8004274 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004272:	2302      	movs	r3, #2
  }
}
 8004274:	4618      	mov	r0, r3
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af02      	add	r7, sp, #8
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	603b      	str	r3, [r7, #0]
 8004288:	4613      	mov	r3, r2
 800428a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b20      	cmp	r3, #32
 800429a:	f040 8090 	bne.w	80043be <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <HAL_UART_Receive+0x2e>
 80042a4:	88fb      	ldrh	r3, [r7, #6]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e088      	b.n	80043c0 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <HAL_UART_Receive+0x40>
 80042b8:	2302      	movs	r3, #2
 80042ba:	e081      	b.n	80043c0 <HAL_UART_Receive+0x144>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2222      	movs	r2, #34	; 0x22
 80042ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80042d2:	f7fd fd35 	bl	8001d40 <HAL_GetTick>
 80042d6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	88fa      	ldrh	r2, [r7, #6]
 80042dc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	88fa      	ldrh	r2, [r7, #6]
 80042e2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80042ec:	e05c      	b.n	80043a8 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004304:	d12b      	bne.n	800435e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2200      	movs	r2, #0
 800430e:	2120      	movs	r1, #32
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 f977 	bl	8004604 <UART_WaitOnFlagUntilTimeout>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e04f      	b.n	80043c0 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10c      	bne.n	8004346 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	b29b      	uxth	r3, r3
 8004334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004338:	b29a      	uxth	r2, r3
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	3302      	adds	r3, #2
 8004342:	60bb      	str	r3, [r7, #8]
 8004344:	e030      	b.n	80043a8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	b29b      	uxth	r3, r3
 800434e:	b2db      	uxtb	r3, r3
 8004350:	b29a      	uxth	r2, r3
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	3301      	adds	r3, #1
 800435a:	60bb      	str	r3, [r7, #8]
 800435c:	e024      	b.n	80043a8 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2200      	movs	r2, #0
 8004366:	2120      	movs	r1, #32
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 f94b 	bl	8004604 <UART_WaitOnFlagUntilTimeout>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e023      	b.n	80043c0 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d108      	bne.n	8004392 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6859      	ldr	r1, [r3, #4]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	60ba      	str	r2, [r7, #8]
 800438c:	b2ca      	uxtb	r2, r1
 800438e:	701a      	strb	r2, [r3, #0]
 8004390:	e00a      	b.n	80043a8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	b2da      	uxtb	r2, r3
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	1c59      	adds	r1, r3, #1
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043a4:	b2d2      	uxtb	r2, r2
 80043a6:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d19d      	bne.n	80042ee <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2220      	movs	r2, #32
 80043b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80043ba:	2300      	movs	r3, #0
 80043bc:	e000      	b.n	80043c0 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80043be:	2302      	movs	r3, #2
  }
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3718      	adds	r7, #24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b088      	sub	sp, #32
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10d      	bne.n	800441a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	f003 0320 	and.w	r3, r3, #32
 8004404:	2b00      	cmp	r3, #0
 8004406:	d008      	beq.n	800441a <HAL_UART_IRQHandler+0x52>
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	f003 0320 	and.w	r3, r3, #32
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f9e0 	bl	80047d8 <UART_Receive_IT>
      return;
 8004418:	e0d1      	b.n	80045be <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 80b0 	beq.w	8004582 <HAL_UART_IRQHandler+0x1ba>
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b00      	cmp	r3, #0
 800442a:	d105      	bne.n	8004438 <HAL_UART_IRQHandler+0x70>
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 80a5 	beq.w	8004582 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <HAL_UART_IRQHandler+0x90>
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004450:	f043 0201 	orr.w	r2, r3, #1
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	f003 0304 	and.w	r3, r3, #4
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00a      	beq.n	8004478 <HAL_UART_IRQHandler+0xb0>
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b00      	cmp	r3, #0
 800446a:	d005      	beq.n	8004478 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004470:	f043 0202 	orr.w	r2, r3, #2
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00a      	beq.n	8004498 <HAL_UART_IRQHandler+0xd0>
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004490:	f043 0204 	orr.w	r2, r3, #4
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	f003 0308 	and.w	r3, r3, #8
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00f      	beq.n	80044c2 <HAL_UART_IRQHandler+0xfa>
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	f003 0320 	and.w	r3, r3, #32
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d104      	bne.n	80044b6 <HAL_UART_IRQHandler+0xee>
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d005      	beq.n	80044c2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ba:	f043 0208 	orr.w	r2, r3, #8
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d078      	beq.n	80045bc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	f003 0320 	and.w	r3, r3, #32
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d007      	beq.n	80044e4 <HAL_UART_IRQHandler+0x11c>
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f97a 	bl	80047d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ee:	2b40      	cmp	r3, #64	; 0x40
 80044f0:	bf0c      	ite	eq
 80044f2:	2301      	moveq	r3, #1
 80044f4:	2300      	movne	r3, #0
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	2b00      	cmp	r3, #0
 8004504:	d102      	bne.n	800450c <HAL_UART_IRQHandler+0x144>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d031      	beq.n	8004570 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f8c3 	bl	8004698 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451c:	2b40      	cmp	r3, #64	; 0x40
 800451e:	d123      	bne.n	8004568 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695a      	ldr	r2, [r3, #20]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800452e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004534:	2b00      	cmp	r3, #0
 8004536:	d013      	beq.n	8004560 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453c:	4a21      	ldr	r2, [pc, #132]	; (80045c4 <HAL_UART_IRQHandler+0x1fc>)
 800453e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004544:	4618      	mov	r0, r3
 8004546:	f7fd fd3a 	bl	8001fbe <HAL_DMA_Abort_IT>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d016      	beq.n	800457e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800455a:	4610      	mov	r0, r2
 800455c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800455e:	e00e      	b.n	800457e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f845 	bl	80045f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004566:	e00a      	b.n	800457e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f841 	bl	80045f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800456e:	e006      	b.n	800457e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f83d 	bl	80045f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800457c:	e01e      	b.n	80045bc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800457e:	bf00      	nop
    return;
 8004580:	e01c      	b.n	80045bc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004588:	2b00      	cmp	r3, #0
 800458a:	d008      	beq.n	800459e <HAL_UART_IRQHandler+0x1d6>
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f8b0 	bl	80046fc <UART_Transmit_IT>
    return;
 800459c:	e00f      	b.n	80045be <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00a      	beq.n	80045be <HAL_UART_IRQHandler+0x1f6>
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f8f8 	bl	80047a8 <UART_EndTransmit_IT>
    return;
 80045b8:	bf00      	nop
 80045ba:	e000      	b.n	80045be <HAL_UART_IRQHandler+0x1f6>
    return;
 80045bc:	bf00      	nop
  }
}
 80045be:	3720      	adds	r7, #32
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	080046d5 	.word	0x080046d5

080045c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	603b      	str	r3, [r7, #0]
 8004610:	4613      	mov	r3, r2
 8004612:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004614:	e02c      	b.n	8004670 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461c:	d028      	beq.n	8004670 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d007      	beq.n	8004634 <UART_WaitOnFlagUntilTimeout+0x30>
 8004624:	f7fd fb8c 	bl	8001d40 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	429a      	cmp	r2, r3
 8004632:	d21d      	bcs.n	8004670 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004642:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695a      	ldr	r2, [r3, #20]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0201 	bic.w	r2, r2, #1
 8004652:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2220      	movs	r2, #32
 8004658:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2220      	movs	r2, #32
 8004660:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e00f      	b.n	8004690 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	4013      	ands	r3, r2
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	429a      	cmp	r2, r3
 800467e:	bf0c      	ite	eq
 8004680:	2301      	moveq	r3, #1
 8004682:	2300      	movne	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	461a      	mov	r2, r3
 8004688:	79fb      	ldrb	r3, [r7, #7]
 800468a:	429a      	cmp	r2, r3
 800468c:	d0c3      	beq.n	8004616 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046ae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	695a      	ldr	r2, [r3, #20]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0201 	bic.w	r2, r2, #1
 80046be:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2220      	movs	r2, #32
 80046c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f7ff ff7e 	bl	80045f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046f4:	bf00      	nop
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b21      	cmp	r3, #33	; 0x21
 800470e:	d144      	bne.n	800479a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004718:	d11a      	bne.n	8004750 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	461a      	mov	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800472e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d105      	bne.n	8004744 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	1c9a      	adds	r2, r3, #2
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	621a      	str	r2, [r3, #32]
 8004742:	e00e      	b.n	8004762 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	1c5a      	adds	r2, r3, #1
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	621a      	str	r2, [r3, #32]
 800474e:	e008      	b.n	8004762 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	1c59      	adds	r1, r3, #1
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6211      	str	r1, [r2, #32]
 800475a:	781a      	ldrb	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004766:	b29b      	uxth	r3, r3
 8004768:	3b01      	subs	r3, #1
 800476a:	b29b      	uxth	r3, r3
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	4619      	mov	r1, r3
 8004770:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10f      	bne.n	8004796 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004784:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68da      	ldr	r2, [r3, #12]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004794:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004796:	2300      	movs	r3, #0
 8004798:	e000      	b.n	800479c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800479a:	2302      	movs	r3, #2
  }
}
 800479c:	4618      	mov	r0, r3
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047be:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2220      	movs	r2, #32
 80047c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f7ff fefd 	bl	80045c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b22      	cmp	r3, #34	; 0x22
 80047ea:	d171      	bne.n	80048d0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f4:	d123      	bne.n	800483e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10e      	bne.n	8004822 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	b29b      	uxth	r3, r3
 800480c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004810:	b29a      	uxth	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481a:	1c9a      	adds	r2, r3, #2
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	629a      	str	r2, [r3, #40]	; 0x28
 8004820:	e029      	b.n	8004876 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	b29b      	uxth	r3, r3
 800482a:	b2db      	uxtb	r3, r3
 800482c:	b29a      	uxth	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004836:	1c5a      	adds	r2, r3, #1
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	629a      	str	r2, [r3, #40]	; 0x28
 800483c:	e01b      	b.n	8004876 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10a      	bne.n	800485c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6858      	ldr	r0, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004850:	1c59      	adds	r1, r3, #1
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6291      	str	r1, [r2, #40]	; 0x28
 8004856:	b2c2      	uxtb	r2, r0
 8004858:	701a      	strb	r2, [r3, #0]
 800485a:	e00c      	b.n	8004876 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	b2da      	uxtb	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004868:	1c58      	adds	r0, r3, #1
 800486a:	6879      	ldr	r1, [r7, #4]
 800486c:	6288      	str	r0, [r1, #40]	; 0x28
 800486e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004872:	b2d2      	uxtb	r2, r2
 8004874:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b01      	subs	r3, #1
 800487e:	b29b      	uxth	r3, r3
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	4619      	mov	r1, r3
 8004884:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004886:	2b00      	cmp	r3, #0
 8004888:	d120      	bne.n	80048cc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68da      	ldr	r2, [r3, #12]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0220 	bic.w	r2, r2, #32
 8004898:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	695a      	ldr	r2, [r3, #20]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0201 	bic.w	r2, r2, #1
 80048b8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2220      	movs	r2, #32
 80048be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7ff fe8a 	bl	80045dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80048c8:	2300      	movs	r3, #0
 80048ca:	e002      	b.n	80048d2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80048cc:	2300      	movs	r3, #0
 80048ce:	e000      	b.n	80048d2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80048d0:	2302      	movs	r3, #2
  }
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
	...

080048dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048e0:	b085      	sub	sp, #20
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68da      	ldr	r2, [r3, #12]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	431a      	orrs	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	69db      	ldr	r3, [r3, #28]
 8004910:	4313      	orrs	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800491e:	f023 030c 	bic.w	r3, r3, #12
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6812      	ldr	r2, [r2, #0]
 8004926:	68f9      	ldr	r1, [r7, #12]
 8004928:	430b      	orrs	r3, r1
 800492a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	699a      	ldr	r2, [r3, #24]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800494a:	f040 818b 	bne.w	8004c64 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4ac1      	ldr	r2, [pc, #772]	; (8004c58 <UART_SetConfig+0x37c>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d005      	beq.n	8004964 <UART_SetConfig+0x88>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4abf      	ldr	r2, [pc, #764]	; (8004c5c <UART_SetConfig+0x380>)
 800495e:	4293      	cmp	r3, r2
 8004960:	f040 80bd 	bne.w	8004ade <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004964:	f7fe fa70 	bl	8002e48 <HAL_RCC_GetPCLK2Freq>
 8004968:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	461d      	mov	r5, r3
 800496e:	f04f 0600 	mov.w	r6, #0
 8004972:	46a8      	mov	r8, r5
 8004974:	46b1      	mov	r9, r6
 8004976:	eb18 0308 	adds.w	r3, r8, r8
 800497a:	eb49 0409 	adc.w	r4, r9, r9
 800497e:	4698      	mov	r8, r3
 8004980:	46a1      	mov	r9, r4
 8004982:	eb18 0805 	adds.w	r8, r8, r5
 8004986:	eb49 0906 	adc.w	r9, r9, r6
 800498a:	f04f 0100 	mov.w	r1, #0
 800498e:	f04f 0200 	mov.w	r2, #0
 8004992:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004996:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800499a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800499e:	4688      	mov	r8, r1
 80049a0:	4691      	mov	r9, r2
 80049a2:	eb18 0005 	adds.w	r0, r8, r5
 80049a6:	eb49 0106 	adc.w	r1, r9, r6
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	461d      	mov	r5, r3
 80049b0:	f04f 0600 	mov.w	r6, #0
 80049b4:	196b      	adds	r3, r5, r5
 80049b6:	eb46 0406 	adc.w	r4, r6, r6
 80049ba:	461a      	mov	r2, r3
 80049bc:	4623      	mov	r3, r4
 80049be:	f7fc f865 	bl	8000a8c <__aeabi_uldivmod>
 80049c2:	4603      	mov	r3, r0
 80049c4:	460c      	mov	r4, r1
 80049c6:	461a      	mov	r2, r3
 80049c8:	4ba5      	ldr	r3, [pc, #660]	; (8004c60 <UART_SetConfig+0x384>)
 80049ca:	fba3 2302 	umull	r2, r3, r3, r2
 80049ce:	095b      	lsrs	r3, r3, #5
 80049d0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	461d      	mov	r5, r3
 80049d8:	f04f 0600 	mov.w	r6, #0
 80049dc:	46a9      	mov	r9, r5
 80049de:	46b2      	mov	sl, r6
 80049e0:	eb19 0309 	adds.w	r3, r9, r9
 80049e4:	eb4a 040a 	adc.w	r4, sl, sl
 80049e8:	4699      	mov	r9, r3
 80049ea:	46a2      	mov	sl, r4
 80049ec:	eb19 0905 	adds.w	r9, r9, r5
 80049f0:	eb4a 0a06 	adc.w	sl, sl, r6
 80049f4:	f04f 0100 	mov.w	r1, #0
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a08:	4689      	mov	r9, r1
 8004a0a:	4692      	mov	sl, r2
 8004a0c:	eb19 0005 	adds.w	r0, r9, r5
 8004a10:	eb4a 0106 	adc.w	r1, sl, r6
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	461d      	mov	r5, r3
 8004a1a:	f04f 0600 	mov.w	r6, #0
 8004a1e:	196b      	adds	r3, r5, r5
 8004a20:	eb46 0406 	adc.w	r4, r6, r6
 8004a24:	461a      	mov	r2, r3
 8004a26:	4623      	mov	r3, r4
 8004a28:	f7fc f830 	bl	8000a8c <__aeabi_uldivmod>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	460c      	mov	r4, r1
 8004a30:	461a      	mov	r2, r3
 8004a32:	4b8b      	ldr	r3, [pc, #556]	; (8004c60 <UART_SetConfig+0x384>)
 8004a34:	fba3 1302 	umull	r1, r3, r3, r2
 8004a38:	095b      	lsrs	r3, r3, #5
 8004a3a:	2164      	movs	r1, #100	; 0x64
 8004a3c:	fb01 f303 	mul.w	r3, r1, r3
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	3332      	adds	r3, #50	; 0x32
 8004a46:	4a86      	ldr	r2, [pc, #536]	; (8004c60 <UART_SetConfig+0x384>)
 8004a48:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4c:	095b      	lsrs	r3, r3, #5
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a54:	4498      	add	r8, r3
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	461d      	mov	r5, r3
 8004a5a:	f04f 0600 	mov.w	r6, #0
 8004a5e:	46a9      	mov	r9, r5
 8004a60:	46b2      	mov	sl, r6
 8004a62:	eb19 0309 	adds.w	r3, r9, r9
 8004a66:	eb4a 040a 	adc.w	r4, sl, sl
 8004a6a:	4699      	mov	r9, r3
 8004a6c:	46a2      	mov	sl, r4
 8004a6e:	eb19 0905 	adds.w	r9, r9, r5
 8004a72:	eb4a 0a06 	adc.w	sl, sl, r6
 8004a76:	f04f 0100 	mov.w	r1, #0
 8004a7a:	f04f 0200 	mov.w	r2, #0
 8004a7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a8a:	4689      	mov	r9, r1
 8004a8c:	4692      	mov	sl, r2
 8004a8e:	eb19 0005 	adds.w	r0, r9, r5
 8004a92:	eb4a 0106 	adc.w	r1, sl, r6
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	461d      	mov	r5, r3
 8004a9c:	f04f 0600 	mov.w	r6, #0
 8004aa0:	196b      	adds	r3, r5, r5
 8004aa2:	eb46 0406 	adc.w	r4, r6, r6
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	4623      	mov	r3, r4
 8004aaa:	f7fb ffef 	bl	8000a8c <__aeabi_uldivmod>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	460c      	mov	r4, r1
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	4b6a      	ldr	r3, [pc, #424]	; (8004c60 <UART_SetConfig+0x384>)
 8004ab6:	fba3 1302 	umull	r1, r3, r3, r2
 8004aba:	095b      	lsrs	r3, r3, #5
 8004abc:	2164      	movs	r1, #100	; 0x64
 8004abe:	fb01 f303 	mul.w	r3, r1, r3
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	3332      	adds	r3, #50	; 0x32
 8004ac8:	4a65      	ldr	r2, [pc, #404]	; (8004c60 <UART_SetConfig+0x384>)
 8004aca:	fba2 2303 	umull	r2, r3, r2, r3
 8004ace:	095b      	lsrs	r3, r3, #5
 8004ad0:	f003 0207 	and.w	r2, r3, #7
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4442      	add	r2, r8
 8004ada:	609a      	str	r2, [r3, #8]
 8004adc:	e26f      	b.n	8004fbe <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ade:	f7fe f99f 	bl	8002e20 <HAL_RCC_GetPCLK1Freq>
 8004ae2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	461d      	mov	r5, r3
 8004ae8:	f04f 0600 	mov.w	r6, #0
 8004aec:	46a8      	mov	r8, r5
 8004aee:	46b1      	mov	r9, r6
 8004af0:	eb18 0308 	adds.w	r3, r8, r8
 8004af4:	eb49 0409 	adc.w	r4, r9, r9
 8004af8:	4698      	mov	r8, r3
 8004afa:	46a1      	mov	r9, r4
 8004afc:	eb18 0805 	adds.w	r8, r8, r5
 8004b00:	eb49 0906 	adc.w	r9, r9, r6
 8004b04:	f04f 0100 	mov.w	r1, #0
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004b10:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004b14:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004b18:	4688      	mov	r8, r1
 8004b1a:	4691      	mov	r9, r2
 8004b1c:	eb18 0005 	adds.w	r0, r8, r5
 8004b20:	eb49 0106 	adc.w	r1, r9, r6
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	461d      	mov	r5, r3
 8004b2a:	f04f 0600 	mov.w	r6, #0
 8004b2e:	196b      	adds	r3, r5, r5
 8004b30:	eb46 0406 	adc.w	r4, r6, r6
 8004b34:	461a      	mov	r2, r3
 8004b36:	4623      	mov	r3, r4
 8004b38:	f7fb ffa8 	bl	8000a8c <__aeabi_uldivmod>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	460c      	mov	r4, r1
 8004b40:	461a      	mov	r2, r3
 8004b42:	4b47      	ldr	r3, [pc, #284]	; (8004c60 <UART_SetConfig+0x384>)
 8004b44:	fba3 2302 	umull	r2, r3, r3, r2
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	461d      	mov	r5, r3
 8004b52:	f04f 0600 	mov.w	r6, #0
 8004b56:	46a9      	mov	r9, r5
 8004b58:	46b2      	mov	sl, r6
 8004b5a:	eb19 0309 	adds.w	r3, r9, r9
 8004b5e:	eb4a 040a 	adc.w	r4, sl, sl
 8004b62:	4699      	mov	r9, r3
 8004b64:	46a2      	mov	sl, r4
 8004b66:	eb19 0905 	adds.w	r9, r9, r5
 8004b6a:	eb4a 0a06 	adc.w	sl, sl, r6
 8004b6e:	f04f 0100 	mov.w	r1, #0
 8004b72:	f04f 0200 	mov.w	r2, #0
 8004b76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b82:	4689      	mov	r9, r1
 8004b84:	4692      	mov	sl, r2
 8004b86:	eb19 0005 	adds.w	r0, r9, r5
 8004b8a:	eb4a 0106 	adc.w	r1, sl, r6
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	461d      	mov	r5, r3
 8004b94:	f04f 0600 	mov.w	r6, #0
 8004b98:	196b      	adds	r3, r5, r5
 8004b9a:	eb46 0406 	adc.w	r4, r6, r6
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	4623      	mov	r3, r4
 8004ba2:	f7fb ff73 	bl	8000a8c <__aeabi_uldivmod>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	460c      	mov	r4, r1
 8004baa:	461a      	mov	r2, r3
 8004bac:	4b2c      	ldr	r3, [pc, #176]	; (8004c60 <UART_SetConfig+0x384>)
 8004bae:	fba3 1302 	umull	r1, r3, r3, r2
 8004bb2:	095b      	lsrs	r3, r3, #5
 8004bb4:	2164      	movs	r1, #100	; 0x64
 8004bb6:	fb01 f303 	mul.w	r3, r1, r3
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	3332      	adds	r3, #50	; 0x32
 8004bc0:	4a27      	ldr	r2, [pc, #156]	; (8004c60 <UART_SetConfig+0x384>)
 8004bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc6:	095b      	lsrs	r3, r3, #5
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bce:	4498      	add	r8, r3
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	461d      	mov	r5, r3
 8004bd4:	f04f 0600 	mov.w	r6, #0
 8004bd8:	46a9      	mov	r9, r5
 8004bda:	46b2      	mov	sl, r6
 8004bdc:	eb19 0309 	adds.w	r3, r9, r9
 8004be0:	eb4a 040a 	adc.w	r4, sl, sl
 8004be4:	4699      	mov	r9, r3
 8004be6:	46a2      	mov	sl, r4
 8004be8:	eb19 0905 	adds.w	r9, r9, r5
 8004bec:	eb4a 0a06 	adc.w	sl, sl, r6
 8004bf0:	f04f 0100 	mov.w	r1, #0
 8004bf4:	f04f 0200 	mov.w	r2, #0
 8004bf8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bfc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c04:	4689      	mov	r9, r1
 8004c06:	4692      	mov	sl, r2
 8004c08:	eb19 0005 	adds.w	r0, r9, r5
 8004c0c:	eb4a 0106 	adc.w	r1, sl, r6
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	461d      	mov	r5, r3
 8004c16:	f04f 0600 	mov.w	r6, #0
 8004c1a:	196b      	adds	r3, r5, r5
 8004c1c:	eb46 0406 	adc.w	r4, r6, r6
 8004c20:	461a      	mov	r2, r3
 8004c22:	4623      	mov	r3, r4
 8004c24:	f7fb ff32 	bl	8000a8c <__aeabi_uldivmod>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	460c      	mov	r4, r1
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	4b0c      	ldr	r3, [pc, #48]	; (8004c60 <UART_SetConfig+0x384>)
 8004c30:	fba3 1302 	umull	r1, r3, r3, r2
 8004c34:	095b      	lsrs	r3, r3, #5
 8004c36:	2164      	movs	r1, #100	; 0x64
 8004c38:	fb01 f303 	mul.w	r3, r1, r3
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	3332      	adds	r3, #50	; 0x32
 8004c42:	4a07      	ldr	r2, [pc, #28]	; (8004c60 <UART_SetConfig+0x384>)
 8004c44:	fba2 2303 	umull	r2, r3, r2, r3
 8004c48:	095b      	lsrs	r3, r3, #5
 8004c4a:	f003 0207 	and.w	r2, r3, #7
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4442      	add	r2, r8
 8004c54:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004c56:	e1b2      	b.n	8004fbe <UART_SetConfig+0x6e2>
 8004c58:	40011000 	.word	0x40011000
 8004c5c:	40011400 	.word	0x40011400
 8004c60:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4ad7      	ldr	r2, [pc, #860]	; (8004fc8 <UART_SetConfig+0x6ec>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d005      	beq.n	8004c7a <UART_SetConfig+0x39e>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4ad6      	ldr	r2, [pc, #856]	; (8004fcc <UART_SetConfig+0x6f0>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	f040 80d1 	bne.w	8004e1c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c7a:	f7fe f8e5 	bl	8002e48 <HAL_RCC_GetPCLK2Freq>
 8004c7e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	469a      	mov	sl, r3
 8004c84:	f04f 0b00 	mov.w	fp, #0
 8004c88:	46d0      	mov	r8, sl
 8004c8a:	46d9      	mov	r9, fp
 8004c8c:	eb18 0308 	adds.w	r3, r8, r8
 8004c90:	eb49 0409 	adc.w	r4, r9, r9
 8004c94:	4698      	mov	r8, r3
 8004c96:	46a1      	mov	r9, r4
 8004c98:	eb18 080a 	adds.w	r8, r8, sl
 8004c9c:	eb49 090b 	adc.w	r9, r9, fp
 8004ca0:	f04f 0100 	mov.w	r1, #0
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004cac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004cb0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004cb4:	4688      	mov	r8, r1
 8004cb6:	4691      	mov	r9, r2
 8004cb8:	eb1a 0508 	adds.w	r5, sl, r8
 8004cbc:	eb4b 0609 	adc.w	r6, fp, r9
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	f04f 0200 	mov.w	r2, #0
 8004cca:	f04f 0300 	mov.w	r3, #0
 8004cce:	f04f 0400 	mov.w	r4, #0
 8004cd2:	0094      	lsls	r4, r2, #2
 8004cd4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004cd8:	008b      	lsls	r3, r1, #2
 8004cda:	461a      	mov	r2, r3
 8004cdc:	4623      	mov	r3, r4
 8004cde:	4628      	mov	r0, r5
 8004ce0:	4631      	mov	r1, r6
 8004ce2:	f7fb fed3 	bl	8000a8c <__aeabi_uldivmod>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	460c      	mov	r4, r1
 8004cea:	461a      	mov	r2, r3
 8004cec:	4bb8      	ldr	r3, [pc, #736]	; (8004fd0 <UART_SetConfig+0x6f4>)
 8004cee:	fba3 2302 	umull	r2, r3, r3, r2
 8004cf2:	095b      	lsrs	r3, r3, #5
 8004cf4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	469b      	mov	fp, r3
 8004cfc:	f04f 0c00 	mov.w	ip, #0
 8004d00:	46d9      	mov	r9, fp
 8004d02:	46e2      	mov	sl, ip
 8004d04:	eb19 0309 	adds.w	r3, r9, r9
 8004d08:	eb4a 040a 	adc.w	r4, sl, sl
 8004d0c:	4699      	mov	r9, r3
 8004d0e:	46a2      	mov	sl, r4
 8004d10:	eb19 090b 	adds.w	r9, r9, fp
 8004d14:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004d18:	f04f 0100 	mov.w	r1, #0
 8004d1c:	f04f 0200 	mov.w	r2, #0
 8004d20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d24:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d28:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d2c:	4689      	mov	r9, r1
 8004d2e:	4692      	mov	sl, r2
 8004d30:	eb1b 0509 	adds.w	r5, fp, r9
 8004d34:	eb4c 060a 	adc.w	r6, ip, sl
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	f04f 0200 	mov.w	r2, #0
 8004d42:	f04f 0300 	mov.w	r3, #0
 8004d46:	f04f 0400 	mov.w	r4, #0
 8004d4a:	0094      	lsls	r4, r2, #2
 8004d4c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d50:	008b      	lsls	r3, r1, #2
 8004d52:	461a      	mov	r2, r3
 8004d54:	4623      	mov	r3, r4
 8004d56:	4628      	mov	r0, r5
 8004d58:	4631      	mov	r1, r6
 8004d5a:	f7fb fe97 	bl	8000a8c <__aeabi_uldivmod>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	460c      	mov	r4, r1
 8004d62:	461a      	mov	r2, r3
 8004d64:	4b9a      	ldr	r3, [pc, #616]	; (8004fd0 <UART_SetConfig+0x6f4>)
 8004d66:	fba3 1302 	umull	r1, r3, r3, r2
 8004d6a:	095b      	lsrs	r3, r3, #5
 8004d6c:	2164      	movs	r1, #100	; 0x64
 8004d6e:	fb01 f303 	mul.w	r3, r1, r3
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	011b      	lsls	r3, r3, #4
 8004d76:	3332      	adds	r3, #50	; 0x32
 8004d78:	4a95      	ldr	r2, [pc, #596]	; (8004fd0 <UART_SetConfig+0x6f4>)
 8004d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7e:	095b      	lsrs	r3, r3, #5
 8004d80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d84:	4498      	add	r8, r3
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	469b      	mov	fp, r3
 8004d8a:	f04f 0c00 	mov.w	ip, #0
 8004d8e:	46d9      	mov	r9, fp
 8004d90:	46e2      	mov	sl, ip
 8004d92:	eb19 0309 	adds.w	r3, r9, r9
 8004d96:	eb4a 040a 	adc.w	r4, sl, sl
 8004d9a:	4699      	mov	r9, r3
 8004d9c:	46a2      	mov	sl, r4
 8004d9e:	eb19 090b 	adds.w	r9, r9, fp
 8004da2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004da6:	f04f 0100 	mov.w	r1, #0
 8004daa:	f04f 0200 	mov.w	r2, #0
 8004dae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004db2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004db6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004dba:	4689      	mov	r9, r1
 8004dbc:	4692      	mov	sl, r2
 8004dbe:	eb1b 0509 	adds.w	r5, fp, r9
 8004dc2:	eb4c 060a 	adc.w	r6, ip, sl
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	4619      	mov	r1, r3
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	f04f 0400 	mov.w	r4, #0
 8004dd8:	0094      	lsls	r4, r2, #2
 8004dda:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004dde:	008b      	lsls	r3, r1, #2
 8004de0:	461a      	mov	r2, r3
 8004de2:	4623      	mov	r3, r4
 8004de4:	4628      	mov	r0, r5
 8004de6:	4631      	mov	r1, r6
 8004de8:	f7fb fe50 	bl	8000a8c <__aeabi_uldivmod>
 8004dec:	4603      	mov	r3, r0
 8004dee:	460c      	mov	r4, r1
 8004df0:	461a      	mov	r2, r3
 8004df2:	4b77      	ldr	r3, [pc, #476]	; (8004fd0 <UART_SetConfig+0x6f4>)
 8004df4:	fba3 1302 	umull	r1, r3, r3, r2
 8004df8:	095b      	lsrs	r3, r3, #5
 8004dfa:	2164      	movs	r1, #100	; 0x64
 8004dfc:	fb01 f303 	mul.w	r3, r1, r3
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	011b      	lsls	r3, r3, #4
 8004e04:	3332      	adds	r3, #50	; 0x32
 8004e06:	4a72      	ldr	r2, [pc, #456]	; (8004fd0 <UART_SetConfig+0x6f4>)
 8004e08:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0c:	095b      	lsrs	r3, r3, #5
 8004e0e:	f003 020f 	and.w	r2, r3, #15
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4442      	add	r2, r8
 8004e18:	609a      	str	r2, [r3, #8]
 8004e1a:	e0d0      	b.n	8004fbe <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e1c:	f7fe f800 	bl	8002e20 <HAL_RCC_GetPCLK1Freq>
 8004e20:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	469a      	mov	sl, r3
 8004e26:	f04f 0b00 	mov.w	fp, #0
 8004e2a:	46d0      	mov	r8, sl
 8004e2c:	46d9      	mov	r9, fp
 8004e2e:	eb18 0308 	adds.w	r3, r8, r8
 8004e32:	eb49 0409 	adc.w	r4, r9, r9
 8004e36:	4698      	mov	r8, r3
 8004e38:	46a1      	mov	r9, r4
 8004e3a:	eb18 080a 	adds.w	r8, r8, sl
 8004e3e:	eb49 090b 	adc.w	r9, r9, fp
 8004e42:	f04f 0100 	mov.w	r1, #0
 8004e46:	f04f 0200 	mov.w	r2, #0
 8004e4a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004e4e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004e52:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004e56:	4688      	mov	r8, r1
 8004e58:	4691      	mov	r9, r2
 8004e5a:	eb1a 0508 	adds.w	r5, sl, r8
 8004e5e:	eb4b 0609 	adc.w	r6, fp, r9
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	4619      	mov	r1, r3
 8004e68:	f04f 0200 	mov.w	r2, #0
 8004e6c:	f04f 0300 	mov.w	r3, #0
 8004e70:	f04f 0400 	mov.w	r4, #0
 8004e74:	0094      	lsls	r4, r2, #2
 8004e76:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e7a:	008b      	lsls	r3, r1, #2
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	4623      	mov	r3, r4
 8004e80:	4628      	mov	r0, r5
 8004e82:	4631      	mov	r1, r6
 8004e84:	f7fb fe02 	bl	8000a8c <__aeabi_uldivmod>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	460c      	mov	r4, r1
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	4b50      	ldr	r3, [pc, #320]	; (8004fd0 <UART_SetConfig+0x6f4>)
 8004e90:	fba3 2302 	umull	r2, r3, r3, r2
 8004e94:	095b      	lsrs	r3, r3, #5
 8004e96:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	469b      	mov	fp, r3
 8004e9e:	f04f 0c00 	mov.w	ip, #0
 8004ea2:	46d9      	mov	r9, fp
 8004ea4:	46e2      	mov	sl, ip
 8004ea6:	eb19 0309 	adds.w	r3, r9, r9
 8004eaa:	eb4a 040a 	adc.w	r4, sl, sl
 8004eae:	4699      	mov	r9, r3
 8004eb0:	46a2      	mov	sl, r4
 8004eb2:	eb19 090b 	adds.w	r9, r9, fp
 8004eb6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004eba:	f04f 0100 	mov.w	r1, #0
 8004ebe:	f04f 0200 	mov.w	r2, #0
 8004ec2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ec6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004eca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ece:	4689      	mov	r9, r1
 8004ed0:	4692      	mov	sl, r2
 8004ed2:	eb1b 0509 	adds.w	r5, fp, r9
 8004ed6:	eb4c 060a 	adc.w	r6, ip, sl
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	4619      	mov	r1, r3
 8004ee0:	f04f 0200 	mov.w	r2, #0
 8004ee4:	f04f 0300 	mov.w	r3, #0
 8004ee8:	f04f 0400 	mov.w	r4, #0
 8004eec:	0094      	lsls	r4, r2, #2
 8004eee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ef2:	008b      	lsls	r3, r1, #2
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	4623      	mov	r3, r4
 8004ef8:	4628      	mov	r0, r5
 8004efa:	4631      	mov	r1, r6
 8004efc:	f7fb fdc6 	bl	8000a8c <__aeabi_uldivmod>
 8004f00:	4603      	mov	r3, r0
 8004f02:	460c      	mov	r4, r1
 8004f04:	461a      	mov	r2, r3
 8004f06:	4b32      	ldr	r3, [pc, #200]	; (8004fd0 <UART_SetConfig+0x6f4>)
 8004f08:	fba3 1302 	umull	r1, r3, r3, r2
 8004f0c:	095b      	lsrs	r3, r3, #5
 8004f0e:	2164      	movs	r1, #100	; 0x64
 8004f10:	fb01 f303 	mul.w	r3, r1, r3
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	3332      	adds	r3, #50	; 0x32
 8004f1a:	4a2d      	ldr	r2, [pc, #180]	; (8004fd0 <UART_SetConfig+0x6f4>)
 8004f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f20:	095b      	lsrs	r3, r3, #5
 8004f22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f26:	4498      	add	r8, r3
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	469b      	mov	fp, r3
 8004f2c:	f04f 0c00 	mov.w	ip, #0
 8004f30:	46d9      	mov	r9, fp
 8004f32:	46e2      	mov	sl, ip
 8004f34:	eb19 0309 	adds.w	r3, r9, r9
 8004f38:	eb4a 040a 	adc.w	r4, sl, sl
 8004f3c:	4699      	mov	r9, r3
 8004f3e:	46a2      	mov	sl, r4
 8004f40:	eb19 090b 	adds.w	r9, r9, fp
 8004f44:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004f48:	f04f 0100 	mov.w	r1, #0
 8004f4c:	f04f 0200 	mov.w	r2, #0
 8004f50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f5c:	4689      	mov	r9, r1
 8004f5e:	4692      	mov	sl, r2
 8004f60:	eb1b 0509 	adds.w	r5, fp, r9
 8004f64:	eb4c 060a 	adc.w	r6, ip, sl
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	f04f 0200 	mov.w	r2, #0
 8004f72:	f04f 0300 	mov.w	r3, #0
 8004f76:	f04f 0400 	mov.w	r4, #0
 8004f7a:	0094      	lsls	r4, r2, #2
 8004f7c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f80:	008b      	lsls	r3, r1, #2
 8004f82:	461a      	mov	r2, r3
 8004f84:	4623      	mov	r3, r4
 8004f86:	4628      	mov	r0, r5
 8004f88:	4631      	mov	r1, r6
 8004f8a:	f7fb fd7f 	bl	8000a8c <__aeabi_uldivmod>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	460c      	mov	r4, r1
 8004f92:	461a      	mov	r2, r3
 8004f94:	4b0e      	ldr	r3, [pc, #56]	; (8004fd0 <UART_SetConfig+0x6f4>)
 8004f96:	fba3 1302 	umull	r1, r3, r3, r2
 8004f9a:	095b      	lsrs	r3, r3, #5
 8004f9c:	2164      	movs	r1, #100	; 0x64
 8004f9e:	fb01 f303 	mul.w	r3, r1, r3
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	011b      	lsls	r3, r3, #4
 8004fa6:	3332      	adds	r3, #50	; 0x32
 8004fa8:	4a09      	ldr	r2, [pc, #36]	; (8004fd0 <UART_SetConfig+0x6f4>)
 8004faa:	fba2 2303 	umull	r2, r3, r2, r3
 8004fae:	095b      	lsrs	r3, r3, #5
 8004fb0:	f003 020f 	and.w	r2, r3, #15
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4442      	add	r2, r8
 8004fba:	609a      	str	r2, [r3, #8]
}
 8004fbc:	e7ff      	b.n	8004fbe <UART_SetConfig+0x6e2>
 8004fbe:	bf00      	nop
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fc8:	40011000 	.word	0x40011000
 8004fcc:	40011400 	.word	0x40011400
 8004fd0:	51eb851f 	.word	0x51eb851f

08004fd4 <__errno>:
 8004fd4:	4b01      	ldr	r3, [pc, #4]	; (8004fdc <__errno+0x8>)
 8004fd6:	6818      	ldr	r0, [r3, #0]
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	20000010 	.word	0x20000010

08004fe0 <__libc_init_array>:
 8004fe0:	b570      	push	{r4, r5, r6, lr}
 8004fe2:	4e0d      	ldr	r6, [pc, #52]	; (8005018 <__libc_init_array+0x38>)
 8004fe4:	4c0d      	ldr	r4, [pc, #52]	; (800501c <__libc_init_array+0x3c>)
 8004fe6:	1ba4      	subs	r4, r4, r6
 8004fe8:	10a4      	asrs	r4, r4, #2
 8004fea:	2500      	movs	r5, #0
 8004fec:	42a5      	cmp	r5, r4
 8004fee:	d109      	bne.n	8005004 <__libc_init_array+0x24>
 8004ff0:	4e0b      	ldr	r6, [pc, #44]	; (8005020 <__libc_init_array+0x40>)
 8004ff2:	4c0c      	ldr	r4, [pc, #48]	; (8005024 <__libc_init_array+0x44>)
 8004ff4:	f000 fc26 	bl	8005844 <_init>
 8004ff8:	1ba4      	subs	r4, r4, r6
 8004ffa:	10a4      	asrs	r4, r4, #2
 8004ffc:	2500      	movs	r5, #0
 8004ffe:	42a5      	cmp	r5, r4
 8005000:	d105      	bne.n	800500e <__libc_init_array+0x2e>
 8005002:	bd70      	pop	{r4, r5, r6, pc}
 8005004:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005008:	4798      	blx	r3
 800500a:	3501      	adds	r5, #1
 800500c:	e7ee      	b.n	8004fec <__libc_init_array+0xc>
 800500e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005012:	4798      	blx	r3
 8005014:	3501      	adds	r5, #1
 8005016:	e7f2      	b.n	8004ffe <__libc_init_array+0x1e>
 8005018:	080058cc 	.word	0x080058cc
 800501c:	080058cc 	.word	0x080058cc
 8005020:	080058cc 	.word	0x080058cc
 8005024:	080058d0 	.word	0x080058d0

08005028 <memset>:
 8005028:	4402      	add	r2, r0
 800502a:	4603      	mov	r3, r0
 800502c:	4293      	cmp	r3, r2
 800502e:	d100      	bne.n	8005032 <memset+0xa>
 8005030:	4770      	bx	lr
 8005032:	f803 1b01 	strb.w	r1, [r3], #1
 8005036:	e7f9      	b.n	800502c <memset+0x4>

08005038 <siprintf>:
 8005038:	b40e      	push	{r1, r2, r3}
 800503a:	b500      	push	{lr}
 800503c:	b09c      	sub	sp, #112	; 0x70
 800503e:	ab1d      	add	r3, sp, #116	; 0x74
 8005040:	9002      	str	r0, [sp, #8]
 8005042:	9006      	str	r0, [sp, #24]
 8005044:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005048:	4809      	ldr	r0, [pc, #36]	; (8005070 <siprintf+0x38>)
 800504a:	9107      	str	r1, [sp, #28]
 800504c:	9104      	str	r1, [sp, #16]
 800504e:	4909      	ldr	r1, [pc, #36]	; (8005074 <siprintf+0x3c>)
 8005050:	f853 2b04 	ldr.w	r2, [r3], #4
 8005054:	9105      	str	r1, [sp, #20]
 8005056:	6800      	ldr	r0, [r0, #0]
 8005058:	9301      	str	r3, [sp, #4]
 800505a:	a902      	add	r1, sp, #8
 800505c:	f000 f866 	bl	800512c <_svfiprintf_r>
 8005060:	9b02      	ldr	r3, [sp, #8]
 8005062:	2200      	movs	r2, #0
 8005064:	701a      	strb	r2, [r3, #0]
 8005066:	b01c      	add	sp, #112	; 0x70
 8005068:	f85d eb04 	ldr.w	lr, [sp], #4
 800506c:	b003      	add	sp, #12
 800506e:	4770      	bx	lr
 8005070:	20000010 	.word	0x20000010
 8005074:	ffff0208 	.word	0xffff0208

08005078 <__ssputs_r>:
 8005078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800507c:	688e      	ldr	r6, [r1, #8]
 800507e:	429e      	cmp	r6, r3
 8005080:	4682      	mov	sl, r0
 8005082:	460c      	mov	r4, r1
 8005084:	4690      	mov	r8, r2
 8005086:	4699      	mov	r9, r3
 8005088:	d837      	bhi.n	80050fa <__ssputs_r+0x82>
 800508a:	898a      	ldrh	r2, [r1, #12]
 800508c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005090:	d031      	beq.n	80050f6 <__ssputs_r+0x7e>
 8005092:	6825      	ldr	r5, [r4, #0]
 8005094:	6909      	ldr	r1, [r1, #16]
 8005096:	1a6f      	subs	r7, r5, r1
 8005098:	6965      	ldr	r5, [r4, #20]
 800509a:	2302      	movs	r3, #2
 800509c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050a0:	fb95 f5f3 	sdiv	r5, r5, r3
 80050a4:	f109 0301 	add.w	r3, r9, #1
 80050a8:	443b      	add	r3, r7
 80050aa:	429d      	cmp	r5, r3
 80050ac:	bf38      	it	cc
 80050ae:	461d      	movcc	r5, r3
 80050b0:	0553      	lsls	r3, r2, #21
 80050b2:	d530      	bpl.n	8005116 <__ssputs_r+0x9e>
 80050b4:	4629      	mov	r1, r5
 80050b6:	f000 fb2b 	bl	8005710 <_malloc_r>
 80050ba:	4606      	mov	r6, r0
 80050bc:	b950      	cbnz	r0, 80050d4 <__ssputs_r+0x5c>
 80050be:	230c      	movs	r3, #12
 80050c0:	f8ca 3000 	str.w	r3, [sl]
 80050c4:	89a3      	ldrh	r3, [r4, #12]
 80050c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050ca:	81a3      	strh	r3, [r4, #12]
 80050cc:	f04f 30ff 	mov.w	r0, #4294967295
 80050d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050d4:	463a      	mov	r2, r7
 80050d6:	6921      	ldr	r1, [r4, #16]
 80050d8:	f000 faa8 	bl	800562c <memcpy>
 80050dc:	89a3      	ldrh	r3, [r4, #12]
 80050de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80050e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e6:	81a3      	strh	r3, [r4, #12]
 80050e8:	6126      	str	r6, [r4, #16]
 80050ea:	6165      	str	r5, [r4, #20]
 80050ec:	443e      	add	r6, r7
 80050ee:	1bed      	subs	r5, r5, r7
 80050f0:	6026      	str	r6, [r4, #0]
 80050f2:	60a5      	str	r5, [r4, #8]
 80050f4:	464e      	mov	r6, r9
 80050f6:	454e      	cmp	r6, r9
 80050f8:	d900      	bls.n	80050fc <__ssputs_r+0x84>
 80050fa:	464e      	mov	r6, r9
 80050fc:	4632      	mov	r2, r6
 80050fe:	4641      	mov	r1, r8
 8005100:	6820      	ldr	r0, [r4, #0]
 8005102:	f000 fa9e 	bl	8005642 <memmove>
 8005106:	68a3      	ldr	r3, [r4, #8]
 8005108:	1b9b      	subs	r3, r3, r6
 800510a:	60a3      	str	r3, [r4, #8]
 800510c:	6823      	ldr	r3, [r4, #0]
 800510e:	441e      	add	r6, r3
 8005110:	6026      	str	r6, [r4, #0]
 8005112:	2000      	movs	r0, #0
 8005114:	e7dc      	b.n	80050d0 <__ssputs_r+0x58>
 8005116:	462a      	mov	r2, r5
 8005118:	f000 fb54 	bl	80057c4 <_realloc_r>
 800511c:	4606      	mov	r6, r0
 800511e:	2800      	cmp	r0, #0
 8005120:	d1e2      	bne.n	80050e8 <__ssputs_r+0x70>
 8005122:	6921      	ldr	r1, [r4, #16]
 8005124:	4650      	mov	r0, sl
 8005126:	f000 faa5 	bl	8005674 <_free_r>
 800512a:	e7c8      	b.n	80050be <__ssputs_r+0x46>

0800512c <_svfiprintf_r>:
 800512c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005130:	461d      	mov	r5, r3
 8005132:	898b      	ldrh	r3, [r1, #12]
 8005134:	061f      	lsls	r7, r3, #24
 8005136:	b09d      	sub	sp, #116	; 0x74
 8005138:	4680      	mov	r8, r0
 800513a:	460c      	mov	r4, r1
 800513c:	4616      	mov	r6, r2
 800513e:	d50f      	bpl.n	8005160 <_svfiprintf_r+0x34>
 8005140:	690b      	ldr	r3, [r1, #16]
 8005142:	b96b      	cbnz	r3, 8005160 <_svfiprintf_r+0x34>
 8005144:	2140      	movs	r1, #64	; 0x40
 8005146:	f000 fae3 	bl	8005710 <_malloc_r>
 800514a:	6020      	str	r0, [r4, #0]
 800514c:	6120      	str	r0, [r4, #16]
 800514e:	b928      	cbnz	r0, 800515c <_svfiprintf_r+0x30>
 8005150:	230c      	movs	r3, #12
 8005152:	f8c8 3000 	str.w	r3, [r8]
 8005156:	f04f 30ff 	mov.w	r0, #4294967295
 800515a:	e0c8      	b.n	80052ee <_svfiprintf_r+0x1c2>
 800515c:	2340      	movs	r3, #64	; 0x40
 800515e:	6163      	str	r3, [r4, #20]
 8005160:	2300      	movs	r3, #0
 8005162:	9309      	str	r3, [sp, #36]	; 0x24
 8005164:	2320      	movs	r3, #32
 8005166:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800516a:	2330      	movs	r3, #48	; 0x30
 800516c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005170:	9503      	str	r5, [sp, #12]
 8005172:	f04f 0b01 	mov.w	fp, #1
 8005176:	4637      	mov	r7, r6
 8005178:	463d      	mov	r5, r7
 800517a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800517e:	b10b      	cbz	r3, 8005184 <_svfiprintf_r+0x58>
 8005180:	2b25      	cmp	r3, #37	; 0x25
 8005182:	d13e      	bne.n	8005202 <_svfiprintf_r+0xd6>
 8005184:	ebb7 0a06 	subs.w	sl, r7, r6
 8005188:	d00b      	beq.n	80051a2 <_svfiprintf_r+0x76>
 800518a:	4653      	mov	r3, sl
 800518c:	4632      	mov	r2, r6
 800518e:	4621      	mov	r1, r4
 8005190:	4640      	mov	r0, r8
 8005192:	f7ff ff71 	bl	8005078 <__ssputs_r>
 8005196:	3001      	adds	r0, #1
 8005198:	f000 80a4 	beq.w	80052e4 <_svfiprintf_r+0x1b8>
 800519c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800519e:	4453      	add	r3, sl
 80051a0:	9309      	str	r3, [sp, #36]	; 0x24
 80051a2:	783b      	ldrb	r3, [r7, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 809d 	beq.w	80052e4 <_svfiprintf_r+0x1b8>
 80051aa:	2300      	movs	r3, #0
 80051ac:	f04f 32ff 	mov.w	r2, #4294967295
 80051b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051b4:	9304      	str	r3, [sp, #16]
 80051b6:	9307      	str	r3, [sp, #28]
 80051b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051bc:	931a      	str	r3, [sp, #104]	; 0x68
 80051be:	462f      	mov	r7, r5
 80051c0:	2205      	movs	r2, #5
 80051c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80051c6:	4850      	ldr	r0, [pc, #320]	; (8005308 <_svfiprintf_r+0x1dc>)
 80051c8:	f7fb f822 	bl	8000210 <memchr>
 80051cc:	9b04      	ldr	r3, [sp, #16]
 80051ce:	b9d0      	cbnz	r0, 8005206 <_svfiprintf_r+0xda>
 80051d0:	06d9      	lsls	r1, r3, #27
 80051d2:	bf44      	itt	mi
 80051d4:	2220      	movmi	r2, #32
 80051d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80051da:	071a      	lsls	r2, r3, #28
 80051dc:	bf44      	itt	mi
 80051de:	222b      	movmi	r2, #43	; 0x2b
 80051e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80051e4:	782a      	ldrb	r2, [r5, #0]
 80051e6:	2a2a      	cmp	r2, #42	; 0x2a
 80051e8:	d015      	beq.n	8005216 <_svfiprintf_r+0xea>
 80051ea:	9a07      	ldr	r2, [sp, #28]
 80051ec:	462f      	mov	r7, r5
 80051ee:	2000      	movs	r0, #0
 80051f0:	250a      	movs	r5, #10
 80051f2:	4639      	mov	r1, r7
 80051f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051f8:	3b30      	subs	r3, #48	; 0x30
 80051fa:	2b09      	cmp	r3, #9
 80051fc:	d94d      	bls.n	800529a <_svfiprintf_r+0x16e>
 80051fe:	b1b8      	cbz	r0, 8005230 <_svfiprintf_r+0x104>
 8005200:	e00f      	b.n	8005222 <_svfiprintf_r+0xf6>
 8005202:	462f      	mov	r7, r5
 8005204:	e7b8      	b.n	8005178 <_svfiprintf_r+0x4c>
 8005206:	4a40      	ldr	r2, [pc, #256]	; (8005308 <_svfiprintf_r+0x1dc>)
 8005208:	1a80      	subs	r0, r0, r2
 800520a:	fa0b f000 	lsl.w	r0, fp, r0
 800520e:	4318      	orrs	r0, r3
 8005210:	9004      	str	r0, [sp, #16]
 8005212:	463d      	mov	r5, r7
 8005214:	e7d3      	b.n	80051be <_svfiprintf_r+0x92>
 8005216:	9a03      	ldr	r2, [sp, #12]
 8005218:	1d11      	adds	r1, r2, #4
 800521a:	6812      	ldr	r2, [r2, #0]
 800521c:	9103      	str	r1, [sp, #12]
 800521e:	2a00      	cmp	r2, #0
 8005220:	db01      	blt.n	8005226 <_svfiprintf_r+0xfa>
 8005222:	9207      	str	r2, [sp, #28]
 8005224:	e004      	b.n	8005230 <_svfiprintf_r+0x104>
 8005226:	4252      	negs	r2, r2
 8005228:	f043 0302 	orr.w	r3, r3, #2
 800522c:	9207      	str	r2, [sp, #28]
 800522e:	9304      	str	r3, [sp, #16]
 8005230:	783b      	ldrb	r3, [r7, #0]
 8005232:	2b2e      	cmp	r3, #46	; 0x2e
 8005234:	d10c      	bne.n	8005250 <_svfiprintf_r+0x124>
 8005236:	787b      	ldrb	r3, [r7, #1]
 8005238:	2b2a      	cmp	r3, #42	; 0x2a
 800523a:	d133      	bne.n	80052a4 <_svfiprintf_r+0x178>
 800523c:	9b03      	ldr	r3, [sp, #12]
 800523e:	1d1a      	adds	r2, r3, #4
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	9203      	str	r2, [sp, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	bfb8      	it	lt
 8005248:	f04f 33ff 	movlt.w	r3, #4294967295
 800524c:	3702      	adds	r7, #2
 800524e:	9305      	str	r3, [sp, #20]
 8005250:	4d2e      	ldr	r5, [pc, #184]	; (800530c <_svfiprintf_r+0x1e0>)
 8005252:	7839      	ldrb	r1, [r7, #0]
 8005254:	2203      	movs	r2, #3
 8005256:	4628      	mov	r0, r5
 8005258:	f7fa ffda 	bl	8000210 <memchr>
 800525c:	b138      	cbz	r0, 800526e <_svfiprintf_r+0x142>
 800525e:	2340      	movs	r3, #64	; 0x40
 8005260:	1b40      	subs	r0, r0, r5
 8005262:	fa03 f000 	lsl.w	r0, r3, r0
 8005266:	9b04      	ldr	r3, [sp, #16]
 8005268:	4303      	orrs	r3, r0
 800526a:	3701      	adds	r7, #1
 800526c:	9304      	str	r3, [sp, #16]
 800526e:	7839      	ldrb	r1, [r7, #0]
 8005270:	4827      	ldr	r0, [pc, #156]	; (8005310 <_svfiprintf_r+0x1e4>)
 8005272:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005276:	2206      	movs	r2, #6
 8005278:	1c7e      	adds	r6, r7, #1
 800527a:	f7fa ffc9 	bl	8000210 <memchr>
 800527e:	2800      	cmp	r0, #0
 8005280:	d038      	beq.n	80052f4 <_svfiprintf_r+0x1c8>
 8005282:	4b24      	ldr	r3, [pc, #144]	; (8005314 <_svfiprintf_r+0x1e8>)
 8005284:	bb13      	cbnz	r3, 80052cc <_svfiprintf_r+0x1a0>
 8005286:	9b03      	ldr	r3, [sp, #12]
 8005288:	3307      	adds	r3, #7
 800528a:	f023 0307 	bic.w	r3, r3, #7
 800528e:	3308      	adds	r3, #8
 8005290:	9303      	str	r3, [sp, #12]
 8005292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005294:	444b      	add	r3, r9
 8005296:	9309      	str	r3, [sp, #36]	; 0x24
 8005298:	e76d      	b.n	8005176 <_svfiprintf_r+0x4a>
 800529a:	fb05 3202 	mla	r2, r5, r2, r3
 800529e:	2001      	movs	r0, #1
 80052a0:	460f      	mov	r7, r1
 80052a2:	e7a6      	b.n	80051f2 <_svfiprintf_r+0xc6>
 80052a4:	2300      	movs	r3, #0
 80052a6:	3701      	adds	r7, #1
 80052a8:	9305      	str	r3, [sp, #20]
 80052aa:	4619      	mov	r1, r3
 80052ac:	250a      	movs	r5, #10
 80052ae:	4638      	mov	r0, r7
 80052b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052b4:	3a30      	subs	r2, #48	; 0x30
 80052b6:	2a09      	cmp	r2, #9
 80052b8:	d903      	bls.n	80052c2 <_svfiprintf_r+0x196>
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0c8      	beq.n	8005250 <_svfiprintf_r+0x124>
 80052be:	9105      	str	r1, [sp, #20]
 80052c0:	e7c6      	b.n	8005250 <_svfiprintf_r+0x124>
 80052c2:	fb05 2101 	mla	r1, r5, r1, r2
 80052c6:	2301      	movs	r3, #1
 80052c8:	4607      	mov	r7, r0
 80052ca:	e7f0      	b.n	80052ae <_svfiprintf_r+0x182>
 80052cc:	ab03      	add	r3, sp, #12
 80052ce:	9300      	str	r3, [sp, #0]
 80052d0:	4622      	mov	r2, r4
 80052d2:	4b11      	ldr	r3, [pc, #68]	; (8005318 <_svfiprintf_r+0x1ec>)
 80052d4:	a904      	add	r1, sp, #16
 80052d6:	4640      	mov	r0, r8
 80052d8:	f3af 8000 	nop.w
 80052dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80052e0:	4681      	mov	r9, r0
 80052e2:	d1d6      	bne.n	8005292 <_svfiprintf_r+0x166>
 80052e4:	89a3      	ldrh	r3, [r4, #12]
 80052e6:	065b      	lsls	r3, r3, #25
 80052e8:	f53f af35 	bmi.w	8005156 <_svfiprintf_r+0x2a>
 80052ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052ee:	b01d      	add	sp, #116	; 0x74
 80052f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052f4:	ab03      	add	r3, sp, #12
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	4622      	mov	r2, r4
 80052fa:	4b07      	ldr	r3, [pc, #28]	; (8005318 <_svfiprintf_r+0x1ec>)
 80052fc:	a904      	add	r1, sp, #16
 80052fe:	4640      	mov	r0, r8
 8005300:	f000 f882 	bl	8005408 <_printf_i>
 8005304:	e7ea      	b.n	80052dc <_svfiprintf_r+0x1b0>
 8005306:	bf00      	nop
 8005308:	08005890 	.word	0x08005890
 800530c:	08005896 	.word	0x08005896
 8005310:	0800589a 	.word	0x0800589a
 8005314:	00000000 	.word	0x00000000
 8005318:	08005079 	.word	0x08005079

0800531c <_printf_common>:
 800531c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005320:	4691      	mov	r9, r2
 8005322:	461f      	mov	r7, r3
 8005324:	688a      	ldr	r2, [r1, #8]
 8005326:	690b      	ldr	r3, [r1, #16]
 8005328:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800532c:	4293      	cmp	r3, r2
 800532e:	bfb8      	it	lt
 8005330:	4613      	movlt	r3, r2
 8005332:	f8c9 3000 	str.w	r3, [r9]
 8005336:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800533a:	4606      	mov	r6, r0
 800533c:	460c      	mov	r4, r1
 800533e:	b112      	cbz	r2, 8005346 <_printf_common+0x2a>
 8005340:	3301      	adds	r3, #1
 8005342:	f8c9 3000 	str.w	r3, [r9]
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	0699      	lsls	r1, r3, #26
 800534a:	bf42      	ittt	mi
 800534c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005350:	3302      	addmi	r3, #2
 8005352:	f8c9 3000 	strmi.w	r3, [r9]
 8005356:	6825      	ldr	r5, [r4, #0]
 8005358:	f015 0506 	ands.w	r5, r5, #6
 800535c:	d107      	bne.n	800536e <_printf_common+0x52>
 800535e:	f104 0a19 	add.w	sl, r4, #25
 8005362:	68e3      	ldr	r3, [r4, #12]
 8005364:	f8d9 2000 	ldr.w	r2, [r9]
 8005368:	1a9b      	subs	r3, r3, r2
 800536a:	42ab      	cmp	r3, r5
 800536c:	dc28      	bgt.n	80053c0 <_printf_common+0xa4>
 800536e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005372:	6822      	ldr	r2, [r4, #0]
 8005374:	3300      	adds	r3, #0
 8005376:	bf18      	it	ne
 8005378:	2301      	movne	r3, #1
 800537a:	0692      	lsls	r2, r2, #26
 800537c:	d42d      	bmi.n	80053da <_printf_common+0xbe>
 800537e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005382:	4639      	mov	r1, r7
 8005384:	4630      	mov	r0, r6
 8005386:	47c0      	blx	r8
 8005388:	3001      	adds	r0, #1
 800538a:	d020      	beq.n	80053ce <_printf_common+0xb2>
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	68e5      	ldr	r5, [r4, #12]
 8005390:	f8d9 2000 	ldr.w	r2, [r9]
 8005394:	f003 0306 	and.w	r3, r3, #6
 8005398:	2b04      	cmp	r3, #4
 800539a:	bf08      	it	eq
 800539c:	1aad      	subeq	r5, r5, r2
 800539e:	68a3      	ldr	r3, [r4, #8]
 80053a0:	6922      	ldr	r2, [r4, #16]
 80053a2:	bf0c      	ite	eq
 80053a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053a8:	2500      	movne	r5, #0
 80053aa:	4293      	cmp	r3, r2
 80053ac:	bfc4      	itt	gt
 80053ae:	1a9b      	subgt	r3, r3, r2
 80053b0:	18ed      	addgt	r5, r5, r3
 80053b2:	f04f 0900 	mov.w	r9, #0
 80053b6:	341a      	adds	r4, #26
 80053b8:	454d      	cmp	r5, r9
 80053ba:	d11a      	bne.n	80053f2 <_printf_common+0xd6>
 80053bc:	2000      	movs	r0, #0
 80053be:	e008      	b.n	80053d2 <_printf_common+0xb6>
 80053c0:	2301      	movs	r3, #1
 80053c2:	4652      	mov	r2, sl
 80053c4:	4639      	mov	r1, r7
 80053c6:	4630      	mov	r0, r6
 80053c8:	47c0      	blx	r8
 80053ca:	3001      	adds	r0, #1
 80053cc:	d103      	bne.n	80053d6 <_printf_common+0xba>
 80053ce:	f04f 30ff 	mov.w	r0, #4294967295
 80053d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053d6:	3501      	adds	r5, #1
 80053d8:	e7c3      	b.n	8005362 <_printf_common+0x46>
 80053da:	18e1      	adds	r1, r4, r3
 80053dc:	1c5a      	adds	r2, r3, #1
 80053de:	2030      	movs	r0, #48	; 0x30
 80053e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053e4:	4422      	add	r2, r4
 80053e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053ee:	3302      	adds	r3, #2
 80053f0:	e7c5      	b.n	800537e <_printf_common+0x62>
 80053f2:	2301      	movs	r3, #1
 80053f4:	4622      	mov	r2, r4
 80053f6:	4639      	mov	r1, r7
 80053f8:	4630      	mov	r0, r6
 80053fa:	47c0      	blx	r8
 80053fc:	3001      	adds	r0, #1
 80053fe:	d0e6      	beq.n	80053ce <_printf_common+0xb2>
 8005400:	f109 0901 	add.w	r9, r9, #1
 8005404:	e7d8      	b.n	80053b8 <_printf_common+0x9c>
	...

08005408 <_printf_i>:
 8005408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800540c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005410:	460c      	mov	r4, r1
 8005412:	7e09      	ldrb	r1, [r1, #24]
 8005414:	b085      	sub	sp, #20
 8005416:	296e      	cmp	r1, #110	; 0x6e
 8005418:	4617      	mov	r7, r2
 800541a:	4606      	mov	r6, r0
 800541c:	4698      	mov	r8, r3
 800541e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005420:	f000 80b3 	beq.w	800558a <_printf_i+0x182>
 8005424:	d822      	bhi.n	800546c <_printf_i+0x64>
 8005426:	2963      	cmp	r1, #99	; 0x63
 8005428:	d036      	beq.n	8005498 <_printf_i+0x90>
 800542a:	d80a      	bhi.n	8005442 <_printf_i+0x3a>
 800542c:	2900      	cmp	r1, #0
 800542e:	f000 80b9 	beq.w	80055a4 <_printf_i+0x19c>
 8005432:	2958      	cmp	r1, #88	; 0x58
 8005434:	f000 8083 	beq.w	800553e <_printf_i+0x136>
 8005438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800543c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005440:	e032      	b.n	80054a8 <_printf_i+0xa0>
 8005442:	2964      	cmp	r1, #100	; 0x64
 8005444:	d001      	beq.n	800544a <_printf_i+0x42>
 8005446:	2969      	cmp	r1, #105	; 0x69
 8005448:	d1f6      	bne.n	8005438 <_printf_i+0x30>
 800544a:	6820      	ldr	r0, [r4, #0]
 800544c:	6813      	ldr	r3, [r2, #0]
 800544e:	0605      	lsls	r5, r0, #24
 8005450:	f103 0104 	add.w	r1, r3, #4
 8005454:	d52a      	bpl.n	80054ac <_printf_i+0xa4>
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6011      	str	r1, [r2, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	da03      	bge.n	8005466 <_printf_i+0x5e>
 800545e:	222d      	movs	r2, #45	; 0x2d
 8005460:	425b      	negs	r3, r3
 8005462:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005466:	486f      	ldr	r0, [pc, #444]	; (8005624 <_printf_i+0x21c>)
 8005468:	220a      	movs	r2, #10
 800546a:	e039      	b.n	80054e0 <_printf_i+0xd8>
 800546c:	2973      	cmp	r1, #115	; 0x73
 800546e:	f000 809d 	beq.w	80055ac <_printf_i+0x1a4>
 8005472:	d808      	bhi.n	8005486 <_printf_i+0x7e>
 8005474:	296f      	cmp	r1, #111	; 0x6f
 8005476:	d020      	beq.n	80054ba <_printf_i+0xb2>
 8005478:	2970      	cmp	r1, #112	; 0x70
 800547a:	d1dd      	bne.n	8005438 <_printf_i+0x30>
 800547c:	6823      	ldr	r3, [r4, #0]
 800547e:	f043 0320 	orr.w	r3, r3, #32
 8005482:	6023      	str	r3, [r4, #0]
 8005484:	e003      	b.n	800548e <_printf_i+0x86>
 8005486:	2975      	cmp	r1, #117	; 0x75
 8005488:	d017      	beq.n	80054ba <_printf_i+0xb2>
 800548a:	2978      	cmp	r1, #120	; 0x78
 800548c:	d1d4      	bne.n	8005438 <_printf_i+0x30>
 800548e:	2378      	movs	r3, #120	; 0x78
 8005490:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005494:	4864      	ldr	r0, [pc, #400]	; (8005628 <_printf_i+0x220>)
 8005496:	e055      	b.n	8005544 <_printf_i+0x13c>
 8005498:	6813      	ldr	r3, [r2, #0]
 800549a:	1d19      	adds	r1, r3, #4
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6011      	str	r1, [r2, #0]
 80054a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054a8:	2301      	movs	r3, #1
 80054aa:	e08c      	b.n	80055c6 <_printf_i+0x1be>
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6011      	str	r1, [r2, #0]
 80054b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80054b4:	bf18      	it	ne
 80054b6:	b21b      	sxthne	r3, r3
 80054b8:	e7cf      	b.n	800545a <_printf_i+0x52>
 80054ba:	6813      	ldr	r3, [r2, #0]
 80054bc:	6825      	ldr	r5, [r4, #0]
 80054be:	1d18      	adds	r0, r3, #4
 80054c0:	6010      	str	r0, [r2, #0]
 80054c2:	0628      	lsls	r0, r5, #24
 80054c4:	d501      	bpl.n	80054ca <_printf_i+0xc2>
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	e002      	b.n	80054d0 <_printf_i+0xc8>
 80054ca:	0668      	lsls	r0, r5, #25
 80054cc:	d5fb      	bpl.n	80054c6 <_printf_i+0xbe>
 80054ce:	881b      	ldrh	r3, [r3, #0]
 80054d0:	4854      	ldr	r0, [pc, #336]	; (8005624 <_printf_i+0x21c>)
 80054d2:	296f      	cmp	r1, #111	; 0x6f
 80054d4:	bf14      	ite	ne
 80054d6:	220a      	movne	r2, #10
 80054d8:	2208      	moveq	r2, #8
 80054da:	2100      	movs	r1, #0
 80054dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054e0:	6865      	ldr	r5, [r4, #4]
 80054e2:	60a5      	str	r5, [r4, #8]
 80054e4:	2d00      	cmp	r5, #0
 80054e6:	f2c0 8095 	blt.w	8005614 <_printf_i+0x20c>
 80054ea:	6821      	ldr	r1, [r4, #0]
 80054ec:	f021 0104 	bic.w	r1, r1, #4
 80054f0:	6021      	str	r1, [r4, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d13d      	bne.n	8005572 <_printf_i+0x16a>
 80054f6:	2d00      	cmp	r5, #0
 80054f8:	f040 808e 	bne.w	8005618 <_printf_i+0x210>
 80054fc:	4665      	mov	r5, ip
 80054fe:	2a08      	cmp	r2, #8
 8005500:	d10b      	bne.n	800551a <_printf_i+0x112>
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	07db      	lsls	r3, r3, #31
 8005506:	d508      	bpl.n	800551a <_printf_i+0x112>
 8005508:	6923      	ldr	r3, [r4, #16]
 800550a:	6862      	ldr	r2, [r4, #4]
 800550c:	429a      	cmp	r2, r3
 800550e:	bfde      	ittt	le
 8005510:	2330      	movle	r3, #48	; 0x30
 8005512:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005516:	f105 35ff 	addle.w	r5, r5, #4294967295
 800551a:	ebac 0305 	sub.w	r3, ip, r5
 800551e:	6123      	str	r3, [r4, #16]
 8005520:	f8cd 8000 	str.w	r8, [sp]
 8005524:	463b      	mov	r3, r7
 8005526:	aa03      	add	r2, sp, #12
 8005528:	4621      	mov	r1, r4
 800552a:	4630      	mov	r0, r6
 800552c:	f7ff fef6 	bl	800531c <_printf_common>
 8005530:	3001      	adds	r0, #1
 8005532:	d14d      	bne.n	80055d0 <_printf_i+0x1c8>
 8005534:	f04f 30ff 	mov.w	r0, #4294967295
 8005538:	b005      	add	sp, #20
 800553a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800553e:	4839      	ldr	r0, [pc, #228]	; (8005624 <_printf_i+0x21c>)
 8005540:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005544:	6813      	ldr	r3, [r2, #0]
 8005546:	6821      	ldr	r1, [r4, #0]
 8005548:	1d1d      	adds	r5, r3, #4
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6015      	str	r5, [r2, #0]
 800554e:	060a      	lsls	r2, r1, #24
 8005550:	d50b      	bpl.n	800556a <_printf_i+0x162>
 8005552:	07ca      	lsls	r2, r1, #31
 8005554:	bf44      	itt	mi
 8005556:	f041 0120 	orrmi.w	r1, r1, #32
 800555a:	6021      	strmi	r1, [r4, #0]
 800555c:	b91b      	cbnz	r3, 8005566 <_printf_i+0x15e>
 800555e:	6822      	ldr	r2, [r4, #0]
 8005560:	f022 0220 	bic.w	r2, r2, #32
 8005564:	6022      	str	r2, [r4, #0]
 8005566:	2210      	movs	r2, #16
 8005568:	e7b7      	b.n	80054da <_printf_i+0xd2>
 800556a:	064d      	lsls	r5, r1, #25
 800556c:	bf48      	it	mi
 800556e:	b29b      	uxthmi	r3, r3
 8005570:	e7ef      	b.n	8005552 <_printf_i+0x14a>
 8005572:	4665      	mov	r5, ip
 8005574:	fbb3 f1f2 	udiv	r1, r3, r2
 8005578:	fb02 3311 	mls	r3, r2, r1, r3
 800557c:	5cc3      	ldrb	r3, [r0, r3]
 800557e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005582:	460b      	mov	r3, r1
 8005584:	2900      	cmp	r1, #0
 8005586:	d1f5      	bne.n	8005574 <_printf_i+0x16c>
 8005588:	e7b9      	b.n	80054fe <_printf_i+0xf6>
 800558a:	6813      	ldr	r3, [r2, #0]
 800558c:	6825      	ldr	r5, [r4, #0]
 800558e:	6961      	ldr	r1, [r4, #20]
 8005590:	1d18      	adds	r0, r3, #4
 8005592:	6010      	str	r0, [r2, #0]
 8005594:	0628      	lsls	r0, r5, #24
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	d501      	bpl.n	800559e <_printf_i+0x196>
 800559a:	6019      	str	r1, [r3, #0]
 800559c:	e002      	b.n	80055a4 <_printf_i+0x19c>
 800559e:	066a      	lsls	r2, r5, #25
 80055a0:	d5fb      	bpl.n	800559a <_printf_i+0x192>
 80055a2:	8019      	strh	r1, [r3, #0]
 80055a4:	2300      	movs	r3, #0
 80055a6:	6123      	str	r3, [r4, #16]
 80055a8:	4665      	mov	r5, ip
 80055aa:	e7b9      	b.n	8005520 <_printf_i+0x118>
 80055ac:	6813      	ldr	r3, [r2, #0]
 80055ae:	1d19      	adds	r1, r3, #4
 80055b0:	6011      	str	r1, [r2, #0]
 80055b2:	681d      	ldr	r5, [r3, #0]
 80055b4:	6862      	ldr	r2, [r4, #4]
 80055b6:	2100      	movs	r1, #0
 80055b8:	4628      	mov	r0, r5
 80055ba:	f7fa fe29 	bl	8000210 <memchr>
 80055be:	b108      	cbz	r0, 80055c4 <_printf_i+0x1bc>
 80055c0:	1b40      	subs	r0, r0, r5
 80055c2:	6060      	str	r0, [r4, #4]
 80055c4:	6863      	ldr	r3, [r4, #4]
 80055c6:	6123      	str	r3, [r4, #16]
 80055c8:	2300      	movs	r3, #0
 80055ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055ce:	e7a7      	b.n	8005520 <_printf_i+0x118>
 80055d0:	6923      	ldr	r3, [r4, #16]
 80055d2:	462a      	mov	r2, r5
 80055d4:	4639      	mov	r1, r7
 80055d6:	4630      	mov	r0, r6
 80055d8:	47c0      	blx	r8
 80055da:	3001      	adds	r0, #1
 80055dc:	d0aa      	beq.n	8005534 <_printf_i+0x12c>
 80055de:	6823      	ldr	r3, [r4, #0]
 80055e0:	079b      	lsls	r3, r3, #30
 80055e2:	d413      	bmi.n	800560c <_printf_i+0x204>
 80055e4:	68e0      	ldr	r0, [r4, #12]
 80055e6:	9b03      	ldr	r3, [sp, #12]
 80055e8:	4298      	cmp	r0, r3
 80055ea:	bfb8      	it	lt
 80055ec:	4618      	movlt	r0, r3
 80055ee:	e7a3      	b.n	8005538 <_printf_i+0x130>
 80055f0:	2301      	movs	r3, #1
 80055f2:	464a      	mov	r2, r9
 80055f4:	4639      	mov	r1, r7
 80055f6:	4630      	mov	r0, r6
 80055f8:	47c0      	blx	r8
 80055fa:	3001      	adds	r0, #1
 80055fc:	d09a      	beq.n	8005534 <_printf_i+0x12c>
 80055fe:	3501      	adds	r5, #1
 8005600:	68e3      	ldr	r3, [r4, #12]
 8005602:	9a03      	ldr	r2, [sp, #12]
 8005604:	1a9b      	subs	r3, r3, r2
 8005606:	42ab      	cmp	r3, r5
 8005608:	dcf2      	bgt.n	80055f0 <_printf_i+0x1e8>
 800560a:	e7eb      	b.n	80055e4 <_printf_i+0x1dc>
 800560c:	2500      	movs	r5, #0
 800560e:	f104 0919 	add.w	r9, r4, #25
 8005612:	e7f5      	b.n	8005600 <_printf_i+0x1f8>
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1ac      	bne.n	8005572 <_printf_i+0x16a>
 8005618:	7803      	ldrb	r3, [r0, #0]
 800561a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800561e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005622:	e76c      	b.n	80054fe <_printf_i+0xf6>
 8005624:	080058a1 	.word	0x080058a1
 8005628:	080058b2 	.word	0x080058b2

0800562c <memcpy>:
 800562c:	b510      	push	{r4, lr}
 800562e:	1e43      	subs	r3, r0, #1
 8005630:	440a      	add	r2, r1
 8005632:	4291      	cmp	r1, r2
 8005634:	d100      	bne.n	8005638 <memcpy+0xc>
 8005636:	bd10      	pop	{r4, pc}
 8005638:	f811 4b01 	ldrb.w	r4, [r1], #1
 800563c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005640:	e7f7      	b.n	8005632 <memcpy+0x6>

08005642 <memmove>:
 8005642:	4288      	cmp	r0, r1
 8005644:	b510      	push	{r4, lr}
 8005646:	eb01 0302 	add.w	r3, r1, r2
 800564a:	d807      	bhi.n	800565c <memmove+0x1a>
 800564c:	1e42      	subs	r2, r0, #1
 800564e:	4299      	cmp	r1, r3
 8005650:	d00a      	beq.n	8005668 <memmove+0x26>
 8005652:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005656:	f802 4f01 	strb.w	r4, [r2, #1]!
 800565a:	e7f8      	b.n	800564e <memmove+0xc>
 800565c:	4283      	cmp	r3, r0
 800565e:	d9f5      	bls.n	800564c <memmove+0xa>
 8005660:	1881      	adds	r1, r0, r2
 8005662:	1ad2      	subs	r2, r2, r3
 8005664:	42d3      	cmn	r3, r2
 8005666:	d100      	bne.n	800566a <memmove+0x28>
 8005668:	bd10      	pop	{r4, pc}
 800566a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800566e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005672:	e7f7      	b.n	8005664 <memmove+0x22>

08005674 <_free_r>:
 8005674:	b538      	push	{r3, r4, r5, lr}
 8005676:	4605      	mov	r5, r0
 8005678:	2900      	cmp	r1, #0
 800567a:	d045      	beq.n	8005708 <_free_r+0x94>
 800567c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005680:	1f0c      	subs	r4, r1, #4
 8005682:	2b00      	cmp	r3, #0
 8005684:	bfb8      	it	lt
 8005686:	18e4      	addlt	r4, r4, r3
 8005688:	f000 f8d2 	bl	8005830 <__malloc_lock>
 800568c:	4a1f      	ldr	r2, [pc, #124]	; (800570c <_free_r+0x98>)
 800568e:	6813      	ldr	r3, [r2, #0]
 8005690:	4610      	mov	r0, r2
 8005692:	b933      	cbnz	r3, 80056a2 <_free_r+0x2e>
 8005694:	6063      	str	r3, [r4, #4]
 8005696:	6014      	str	r4, [r2, #0]
 8005698:	4628      	mov	r0, r5
 800569a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800569e:	f000 b8c8 	b.w	8005832 <__malloc_unlock>
 80056a2:	42a3      	cmp	r3, r4
 80056a4:	d90c      	bls.n	80056c0 <_free_r+0x4c>
 80056a6:	6821      	ldr	r1, [r4, #0]
 80056a8:	1862      	adds	r2, r4, r1
 80056aa:	4293      	cmp	r3, r2
 80056ac:	bf04      	itt	eq
 80056ae:	681a      	ldreq	r2, [r3, #0]
 80056b0:	685b      	ldreq	r3, [r3, #4]
 80056b2:	6063      	str	r3, [r4, #4]
 80056b4:	bf04      	itt	eq
 80056b6:	1852      	addeq	r2, r2, r1
 80056b8:	6022      	streq	r2, [r4, #0]
 80056ba:	6004      	str	r4, [r0, #0]
 80056bc:	e7ec      	b.n	8005698 <_free_r+0x24>
 80056be:	4613      	mov	r3, r2
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	b10a      	cbz	r2, 80056c8 <_free_r+0x54>
 80056c4:	42a2      	cmp	r2, r4
 80056c6:	d9fa      	bls.n	80056be <_free_r+0x4a>
 80056c8:	6819      	ldr	r1, [r3, #0]
 80056ca:	1858      	adds	r0, r3, r1
 80056cc:	42a0      	cmp	r0, r4
 80056ce:	d10b      	bne.n	80056e8 <_free_r+0x74>
 80056d0:	6820      	ldr	r0, [r4, #0]
 80056d2:	4401      	add	r1, r0
 80056d4:	1858      	adds	r0, r3, r1
 80056d6:	4282      	cmp	r2, r0
 80056d8:	6019      	str	r1, [r3, #0]
 80056da:	d1dd      	bne.n	8005698 <_free_r+0x24>
 80056dc:	6810      	ldr	r0, [r2, #0]
 80056de:	6852      	ldr	r2, [r2, #4]
 80056e0:	605a      	str	r2, [r3, #4]
 80056e2:	4401      	add	r1, r0
 80056e4:	6019      	str	r1, [r3, #0]
 80056e6:	e7d7      	b.n	8005698 <_free_r+0x24>
 80056e8:	d902      	bls.n	80056f0 <_free_r+0x7c>
 80056ea:	230c      	movs	r3, #12
 80056ec:	602b      	str	r3, [r5, #0]
 80056ee:	e7d3      	b.n	8005698 <_free_r+0x24>
 80056f0:	6820      	ldr	r0, [r4, #0]
 80056f2:	1821      	adds	r1, r4, r0
 80056f4:	428a      	cmp	r2, r1
 80056f6:	bf04      	itt	eq
 80056f8:	6811      	ldreq	r1, [r2, #0]
 80056fa:	6852      	ldreq	r2, [r2, #4]
 80056fc:	6062      	str	r2, [r4, #4]
 80056fe:	bf04      	itt	eq
 8005700:	1809      	addeq	r1, r1, r0
 8005702:	6021      	streq	r1, [r4, #0]
 8005704:	605c      	str	r4, [r3, #4]
 8005706:	e7c7      	b.n	8005698 <_free_r+0x24>
 8005708:	bd38      	pop	{r3, r4, r5, pc}
 800570a:	bf00      	nop
 800570c:	200000b4 	.word	0x200000b4

08005710 <_malloc_r>:
 8005710:	b570      	push	{r4, r5, r6, lr}
 8005712:	1ccd      	adds	r5, r1, #3
 8005714:	f025 0503 	bic.w	r5, r5, #3
 8005718:	3508      	adds	r5, #8
 800571a:	2d0c      	cmp	r5, #12
 800571c:	bf38      	it	cc
 800571e:	250c      	movcc	r5, #12
 8005720:	2d00      	cmp	r5, #0
 8005722:	4606      	mov	r6, r0
 8005724:	db01      	blt.n	800572a <_malloc_r+0x1a>
 8005726:	42a9      	cmp	r1, r5
 8005728:	d903      	bls.n	8005732 <_malloc_r+0x22>
 800572a:	230c      	movs	r3, #12
 800572c:	6033      	str	r3, [r6, #0]
 800572e:	2000      	movs	r0, #0
 8005730:	bd70      	pop	{r4, r5, r6, pc}
 8005732:	f000 f87d 	bl	8005830 <__malloc_lock>
 8005736:	4a21      	ldr	r2, [pc, #132]	; (80057bc <_malloc_r+0xac>)
 8005738:	6814      	ldr	r4, [r2, #0]
 800573a:	4621      	mov	r1, r4
 800573c:	b991      	cbnz	r1, 8005764 <_malloc_r+0x54>
 800573e:	4c20      	ldr	r4, [pc, #128]	; (80057c0 <_malloc_r+0xb0>)
 8005740:	6823      	ldr	r3, [r4, #0]
 8005742:	b91b      	cbnz	r3, 800574c <_malloc_r+0x3c>
 8005744:	4630      	mov	r0, r6
 8005746:	f000 f863 	bl	8005810 <_sbrk_r>
 800574a:	6020      	str	r0, [r4, #0]
 800574c:	4629      	mov	r1, r5
 800574e:	4630      	mov	r0, r6
 8005750:	f000 f85e 	bl	8005810 <_sbrk_r>
 8005754:	1c43      	adds	r3, r0, #1
 8005756:	d124      	bne.n	80057a2 <_malloc_r+0x92>
 8005758:	230c      	movs	r3, #12
 800575a:	6033      	str	r3, [r6, #0]
 800575c:	4630      	mov	r0, r6
 800575e:	f000 f868 	bl	8005832 <__malloc_unlock>
 8005762:	e7e4      	b.n	800572e <_malloc_r+0x1e>
 8005764:	680b      	ldr	r3, [r1, #0]
 8005766:	1b5b      	subs	r3, r3, r5
 8005768:	d418      	bmi.n	800579c <_malloc_r+0x8c>
 800576a:	2b0b      	cmp	r3, #11
 800576c:	d90f      	bls.n	800578e <_malloc_r+0x7e>
 800576e:	600b      	str	r3, [r1, #0]
 8005770:	50cd      	str	r5, [r1, r3]
 8005772:	18cc      	adds	r4, r1, r3
 8005774:	4630      	mov	r0, r6
 8005776:	f000 f85c 	bl	8005832 <__malloc_unlock>
 800577a:	f104 000b 	add.w	r0, r4, #11
 800577e:	1d23      	adds	r3, r4, #4
 8005780:	f020 0007 	bic.w	r0, r0, #7
 8005784:	1ac3      	subs	r3, r0, r3
 8005786:	d0d3      	beq.n	8005730 <_malloc_r+0x20>
 8005788:	425a      	negs	r2, r3
 800578a:	50e2      	str	r2, [r4, r3]
 800578c:	e7d0      	b.n	8005730 <_malloc_r+0x20>
 800578e:	428c      	cmp	r4, r1
 8005790:	684b      	ldr	r3, [r1, #4]
 8005792:	bf16      	itet	ne
 8005794:	6063      	strne	r3, [r4, #4]
 8005796:	6013      	streq	r3, [r2, #0]
 8005798:	460c      	movne	r4, r1
 800579a:	e7eb      	b.n	8005774 <_malloc_r+0x64>
 800579c:	460c      	mov	r4, r1
 800579e:	6849      	ldr	r1, [r1, #4]
 80057a0:	e7cc      	b.n	800573c <_malloc_r+0x2c>
 80057a2:	1cc4      	adds	r4, r0, #3
 80057a4:	f024 0403 	bic.w	r4, r4, #3
 80057a8:	42a0      	cmp	r0, r4
 80057aa:	d005      	beq.n	80057b8 <_malloc_r+0xa8>
 80057ac:	1a21      	subs	r1, r4, r0
 80057ae:	4630      	mov	r0, r6
 80057b0:	f000 f82e 	bl	8005810 <_sbrk_r>
 80057b4:	3001      	adds	r0, #1
 80057b6:	d0cf      	beq.n	8005758 <_malloc_r+0x48>
 80057b8:	6025      	str	r5, [r4, #0]
 80057ba:	e7db      	b.n	8005774 <_malloc_r+0x64>
 80057bc:	200000b4 	.word	0x200000b4
 80057c0:	200000b8 	.word	0x200000b8

080057c4 <_realloc_r>:
 80057c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c6:	4607      	mov	r7, r0
 80057c8:	4614      	mov	r4, r2
 80057ca:	460e      	mov	r6, r1
 80057cc:	b921      	cbnz	r1, 80057d8 <_realloc_r+0x14>
 80057ce:	4611      	mov	r1, r2
 80057d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80057d4:	f7ff bf9c 	b.w	8005710 <_malloc_r>
 80057d8:	b922      	cbnz	r2, 80057e4 <_realloc_r+0x20>
 80057da:	f7ff ff4b 	bl	8005674 <_free_r>
 80057de:	4625      	mov	r5, r4
 80057e0:	4628      	mov	r0, r5
 80057e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057e4:	f000 f826 	bl	8005834 <_malloc_usable_size_r>
 80057e8:	42a0      	cmp	r0, r4
 80057ea:	d20f      	bcs.n	800580c <_realloc_r+0x48>
 80057ec:	4621      	mov	r1, r4
 80057ee:	4638      	mov	r0, r7
 80057f0:	f7ff ff8e 	bl	8005710 <_malloc_r>
 80057f4:	4605      	mov	r5, r0
 80057f6:	2800      	cmp	r0, #0
 80057f8:	d0f2      	beq.n	80057e0 <_realloc_r+0x1c>
 80057fa:	4631      	mov	r1, r6
 80057fc:	4622      	mov	r2, r4
 80057fe:	f7ff ff15 	bl	800562c <memcpy>
 8005802:	4631      	mov	r1, r6
 8005804:	4638      	mov	r0, r7
 8005806:	f7ff ff35 	bl	8005674 <_free_r>
 800580a:	e7e9      	b.n	80057e0 <_realloc_r+0x1c>
 800580c:	4635      	mov	r5, r6
 800580e:	e7e7      	b.n	80057e0 <_realloc_r+0x1c>

08005810 <_sbrk_r>:
 8005810:	b538      	push	{r3, r4, r5, lr}
 8005812:	4c06      	ldr	r4, [pc, #24]	; (800582c <_sbrk_r+0x1c>)
 8005814:	2300      	movs	r3, #0
 8005816:	4605      	mov	r5, r0
 8005818:	4608      	mov	r0, r1
 800581a:	6023      	str	r3, [r4, #0]
 800581c:	f7fc f9b4 	bl	8001b88 <_sbrk>
 8005820:	1c43      	adds	r3, r0, #1
 8005822:	d102      	bne.n	800582a <_sbrk_r+0x1a>
 8005824:	6823      	ldr	r3, [r4, #0]
 8005826:	b103      	cbz	r3, 800582a <_sbrk_r+0x1a>
 8005828:	602b      	str	r3, [r5, #0]
 800582a:	bd38      	pop	{r3, r4, r5, pc}
 800582c:	2000021c 	.word	0x2000021c

08005830 <__malloc_lock>:
 8005830:	4770      	bx	lr

08005832 <__malloc_unlock>:
 8005832:	4770      	bx	lr

08005834 <_malloc_usable_size_r>:
 8005834:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005838:	1f18      	subs	r0, r3, #4
 800583a:	2b00      	cmp	r3, #0
 800583c:	bfbc      	itt	lt
 800583e:	580b      	ldrlt	r3, [r1, r0]
 8005840:	18c0      	addlt	r0, r0, r3
 8005842:	4770      	bx	lr

08005844 <_init>:
 8005844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005846:	bf00      	nop
 8005848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800584a:	bc08      	pop	{r3}
 800584c:	469e      	mov	lr, r3
 800584e:	4770      	bx	lr

08005850 <_fini>:
 8005850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005852:	bf00      	nop
 8005854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005856:	bc08      	pop	{r3}
 8005858:	469e      	mov	lr, r3
 800585a:	4770      	bx	lr
